# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoCattleHelmV1HelmChartSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_pass_credentials': 'bool',
        'auth_secret': 'object',
        'back_off_limit': 'object',
        'bootstrap': 'bool',
        'chart': 'object',
        'chart_content': 'object',
        'create_namespace': 'bool',
        'docker_registry_secret': 'object',
        'failure_policy': 'object',
        'helm_version': 'object',
        'job_image': 'object',
        'pod_security_context': 'object',
        'repo': 'object',
        'repo_ca': 'object',
        'repo_ca_config_map': 'object',
        'security_context': 'object',
        'set': 'object',
        'target_namespace': 'object',
        'timeout': 'object',
        'values_content': 'object',
        'version': 'object'
    }

    attribute_map = {
        'auth_pass_credentials': 'authPassCredentials',
        'auth_secret': 'authSecret',
        'back_off_limit': 'backOffLimit',
        'bootstrap': 'bootstrap',
        'chart': 'chart',
        'chart_content': 'chartContent',
        'create_namespace': 'createNamespace',
        'docker_registry_secret': 'dockerRegistrySecret',
        'failure_policy': 'failurePolicy',
        'helm_version': 'helmVersion',
        'job_image': 'jobImage',
        'pod_security_context': 'podSecurityContext',
        'repo': 'repo',
        'repo_ca': 'repoCA',
        'repo_ca_config_map': 'repoCAConfigMap',
        'security_context': 'securityContext',
        'set': 'set',
        'target_namespace': 'targetNamespace',
        'timeout': 'timeout',
        'values_content': 'valuesContent',
        'version': 'version'
    }

    def __init__(self, auth_pass_credentials=None, auth_secret=None, back_off_limit=None, bootstrap=None, chart=None, chart_content=None, create_namespace=None, docker_registry_secret=None, failure_policy=None, helm_version=None, job_image=None, pod_security_context=None, repo=None, repo_ca=None, repo_ca_config_map=None, security_context=None, set=None, target_namespace=None, timeout=None, values_content=None, version=None, _configuration=None):  # noqa: E501
        """IoCattleHelmV1HelmChartSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_pass_credentials = None
        self._auth_secret = None
        self._back_off_limit = None
        self._bootstrap = None
        self._chart = None
        self._chart_content = None
        self._create_namespace = None
        self._docker_registry_secret = None
        self._failure_policy = None
        self._helm_version = None
        self._job_image = None
        self._pod_security_context = None
        self._repo = None
        self._repo_ca = None
        self._repo_ca_config_map = None
        self._security_context = None
        self._set = None
        self._target_namespace = None
        self._timeout = None
        self._values_content = None
        self._version = None
        self.discriminator = None

        if auth_pass_credentials is not None:
            self.auth_pass_credentials = auth_pass_credentials
        if auth_secret is not None:
            self.auth_secret = auth_secret
        if back_off_limit is not None:
            self.back_off_limit = back_off_limit
        if bootstrap is not None:
            self.bootstrap = bootstrap
        if chart is not None:
            self.chart = chart
        if chart_content is not None:
            self.chart_content = chart_content
        if create_namespace is not None:
            self.create_namespace = create_namespace
        if docker_registry_secret is not None:
            self.docker_registry_secret = docker_registry_secret
        if failure_policy is not None:
            self.failure_policy = failure_policy
        if helm_version is not None:
            self.helm_version = helm_version
        if job_image is not None:
            self.job_image = job_image
        if pod_security_context is not None:
            self.pod_security_context = pod_security_context
        if repo is not None:
            self.repo = repo
        if repo_ca is not None:
            self.repo_ca = repo_ca
        if repo_ca_config_map is not None:
            self.repo_ca_config_map = repo_ca_config_map
        if security_context is not None:
            self.security_context = security_context
        if set is not None:
            self.set = set
        if target_namespace is not None:
            self.target_namespace = target_namespace
        if timeout is not None:
            self.timeout = timeout
        if values_content is not None:
            self.values_content = values_content
        if version is not None:
            self.version = version

    @property
    def auth_pass_credentials(self):
        """Gets the auth_pass_credentials of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The auth_pass_credentials of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: bool
        """
        return self._auth_pass_credentials

    @auth_pass_credentials.setter
    def auth_pass_credentials(self, auth_pass_credentials):
        """Sets the auth_pass_credentials of this IoCattleHelmV1HelmChartSpec.


        :param auth_pass_credentials: The auth_pass_credentials of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: bool
        """

        self._auth_pass_credentials = auth_pass_credentials

    @property
    def auth_secret(self):
        """Gets the auth_secret of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The auth_secret of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._auth_secret

    @auth_secret.setter
    def auth_secret(self, auth_secret):
        """Sets the auth_secret of this IoCattleHelmV1HelmChartSpec.


        :param auth_secret: The auth_secret of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._auth_secret = auth_secret

    @property
    def back_off_limit(self):
        """Gets the back_off_limit of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The back_off_limit of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._back_off_limit

    @back_off_limit.setter
    def back_off_limit(self, back_off_limit):
        """Sets the back_off_limit of this IoCattleHelmV1HelmChartSpec.


        :param back_off_limit: The back_off_limit of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._back_off_limit = back_off_limit

    @property
    def bootstrap(self):
        """Gets the bootstrap of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The bootstrap of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: bool
        """
        return self._bootstrap

    @bootstrap.setter
    def bootstrap(self, bootstrap):
        """Sets the bootstrap of this IoCattleHelmV1HelmChartSpec.


        :param bootstrap: The bootstrap of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: bool
        """

        self._bootstrap = bootstrap

    @property
    def chart(self):
        """Gets the chart of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The chart of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._chart

    @chart.setter
    def chart(self, chart):
        """Sets the chart of this IoCattleHelmV1HelmChartSpec.


        :param chart: The chart of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._chart = chart

    @property
    def chart_content(self):
        """Gets the chart_content of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The chart_content of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._chart_content

    @chart_content.setter
    def chart_content(self, chart_content):
        """Sets the chart_content of this IoCattleHelmV1HelmChartSpec.


        :param chart_content: The chart_content of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._chart_content = chart_content

    @property
    def create_namespace(self):
        """Gets the create_namespace of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The create_namespace of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: bool
        """
        return self._create_namespace

    @create_namespace.setter
    def create_namespace(self, create_namespace):
        """Sets the create_namespace of this IoCattleHelmV1HelmChartSpec.


        :param create_namespace: The create_namespace of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: bool
        """

        self._create_namespace = create_namespace

    @property
    def docker_registry_secret(self):
        """Gets the docker_registry_secret of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The docker_registry_secret of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._docker_registry_secret

    @docker_registry_secret.setter
    def docker_registry_secret(self, docker_registry_secret):
        """Sets the docker_registry_secret of this IoCattleHelmV1HelmChartSpec.


        :param docker_registry_secret: The docker_registry_secret of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._docker_registry_secret = docker_registry_secret

    @property
    def failure_policy(self):
        """Gets the failure_policy of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The failure_policy of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._failure_policy

    @failure_policy.setter
    def failure_policy(self, failure_policy):
        """Sets the failure_policy of this IoCattleHelmV1HelmChartSpec.


        :param failure_policy: The failure_policy of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._failure_policy = failure_policy

    @property
    def helm_version(self):
        """Gets the helm_version of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The helm_version of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._helm_version

    @helm_version.setter
    def helm_version(self, helm_version):
        """Sets the helm_version of this IoCattleHelmV1HelmChartSpec.


        :param helm_version: The helm_version of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._helm_version = helm_version

    @property
    def job_image(self):
        """Gets the job_image of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The job_image of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._job_image

    @job_image.setter
    def job_image(self, job_image):
        """Sets the job_image of this IoCattleHelmV1HelmChartSpec.


        :param job_image: The job_image of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._job_image = job_image

    @property
    def pod_security_context(self):
        """Gets the pod_security_context of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The pod_security_context of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._pod_security_context

    @pod_security_context.setter
    def pod_security_context(self, pod_security_context):
        """Sets the pod_security_context of this IoCattleHelmV1HelmChartSpec.


        :param pod_security_context: The pod_security_context of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._pod_security_context = pod_security_context

    @property
    def repo(self):
        """Gets the repo of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The repo of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this IoCattleHelmV1HelmChartSpec.


        :param repo: The repo of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._repo = repo

    @property
    def repo_ca(self):
        """Gets the repo_ca of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The repo_ca of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._repo_ca

    @repo_ca.setter
    def repo_ca(self, repo_ca):
        """Sets the repo_ca of this IoCattleHelmV1HelmChartSpec.


        :param repo_ca: The repo_ca of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._repo_ca = repo_ca

    @property
    def repo_ca_config_map(self):
        """Gets the repo_ca_config_map of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The repo_ca_config_map of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._repo_ca_config_map

    @repo_ca_config_map.setter
    def repo_ca_config_map(self, repo_ca_config_map):
        """Sets the repo_ca_config_map of this IoCattleHelmV1HelmChartSpec.


        :param repo_ca_config_map: The repo_ca_config_map of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._repo_ca_config_map = repo_ca_config_map

    @property
    def security_context(self):
        """Gets the security_context of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The security_context of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this IoCattleHelmV1HelmChartSpec.


        :param security_context: The security_context of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._security_context = security_context

    @property
    def set(self):
        """Gets the set of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The set of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this IoCattleHelmV1HelmChartSpec.


        :param set: The set of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._set = set

    @property
    def target_namespace(self):
        """Gets the target_namespace of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The target_namespace of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._target_namespace

    @target_namespace.setter
    def target_namespace(self, target_namespace):
        """Sets the target_namespace of this IoCattleHelmV1HelmChartSpec.


        :param target_namespace: The target_namespace of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._target_namespace = target_namespace

    @property
    def timeout(self):
        """Gets the timeout of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The timeout of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this IoCattleHelmV1HelmChartSpec.


        :param timeout: The timeout of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._timeout = timeout

    @property
    def values_content(self):
        """Gets the values_content of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The values_content of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._values_content

    @values_content.setter
    def values_content(self, values_content):
        """Sets the values_content of this IoCattleHelmV1HelmChartSpec.


        :param values_content: The values_content of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._values_content = values_content

    @property
    def version(self):
        """Gets the version of this IoCattleHelmV1HelmChartSpec.  # noqa: E501


        :return: The version of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoCattleHelmV1HelmChartSpec.


        :param version: The version of this IoCattleHelmV1HelmChartSpec.  # noqa: E501
        :type: object
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoCattleHelmV1HelmChartSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCattleHelmV1HelmChartSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCattleHelmV1HelmChartSpec):
            return True

        return self.to_dict() != other.to_dict()
