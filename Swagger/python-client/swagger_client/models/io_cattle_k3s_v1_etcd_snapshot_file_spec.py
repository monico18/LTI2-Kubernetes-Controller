# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoCattleK3sV1ETCDSnapshotFileSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'object',
        'metadata': 'object',
        'node_name': 'object',
        's3': 'object',
        'snapshot_name': 'object'
    }

    attribute_map = {
        'location': 'location',
        'metadata': 'metadata',
        'node_name': 'nodeName',
        's3': 's3',
        'snapshot_name': 'snapshotName'
    }

    def __init__(self, location=None, metadata=None, node_name=None, s3=None, snapshot_name=None, _configuration=None):  # noqa: E501
        """IoCattleK3sV1ETCDSnapshotFileSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._location = None
        self._metadata = None
        self._node_name = None
        self._s3 = None
        self._snapshot_name = None
        self.discriminator = None

        if location is not None:
            self.location = location
        if metadata is not None:
            self.metadata = metadata
        if node_name is not None:
            self.node_name = node_name
        if s3 is not None:
            self.s3 = s3
        if snapshot_name is not None:
            self.snapshot_name = snapshot_name

    @property
    def location(self):
        """Gets the location of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501


        :return: The location of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this IoCattleK3sV1ETCDSnapshotFileSpec.


        :param location: The location of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :type: object
        """

        self._location = location

    @property
    def metadata(self):
        """Gets the metadata of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501


        :return: The metadata of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoCattleK3sV1ETCDSnapshotFileSpec.


        :param metadata: The metadata of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def node_name(self):
        """Gets the node_name of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501


        :return: The node_name of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :rtype: object
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this IoCattleK3sV1ETCDSnapshotFileSpec.


        :param node_name: The node_name of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :type: object
        """

        self._node_name = node_name

    @property
    def s3(self):
        """Gets the s3 of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501


        :return: The s3 of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :rtype: object
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this IoCattleK3sV1ETCDSnapshotFileSpec.


        :param s3: The s3 of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :type: object
        """

        self._s3 = s3

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501


        :return: The snapshot_name of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :rtype: object
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this IoCattleK3sV1ETCDSnapshotFileSpec.


        :param snapshot_name: The snapshot_name of this IoCattleK3sV1ETCDSnapshotFileSpec.  # noqa: E501
        :type: object
        """

        self._snapshot_name = snapshot_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoCattleK3sV1ETCDSnapshotFileSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCattleK3sV1ETCDSnapshotFileSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCattleK3sV1ETCDSnapshotFileSpec):
            return True

        return self.to_dict() != other.to_dict()
