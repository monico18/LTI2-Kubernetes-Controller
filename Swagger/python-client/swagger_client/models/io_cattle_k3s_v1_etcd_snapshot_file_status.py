# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoCattleK3sV1ETCDSnapshotFileStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_time': 'object',
        'error': 'object',
        'ready_to_use': 'object',
        'size': 'object'
    }

    attribute_map = {
        'creation_time': 'creationTime',
        'error': 'error',
        'ready_to_use': 'readyToUse',
        'size': 'size'
    }

    def __init__(self, creation_time=None, error=None, ready_to_use=None, size=None, _configuration=None):  # noqa: E501
        """IoCattleK3sV1ETCDSnapshotFileStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creation_time = None
        self._error = None
        self._ready_to_use = None
        self._size = None
        self.discriminator = None

        if creation_time is not None:
            self.creation_time = creation_time
        if error is not None:
            self.error = error
        if ready_to_use is not None:
            self.ready_to_use = ready_to_use
        if size is not None:
            self.size = size

    @property
    def creation_time(self):
        """Gets the creation_time of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501


        :return: The creation_time of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501
        :rtype: object
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this IoCattleK3sV1ETCDSnapshotFileStatus.


        :param creation_time: The creation_time of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501
        :type: object
        """

        self._creation_time = creation_time

    @property
    def error(self):
        """Gets the error of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501


        :return: The error of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501
        :rtype: object
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this IoCattleK3sV1ETCDSnapshotFileStatus.


        :param error: The error of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501
        :type: object
        """

        self._error = error

    @property
    def ready_to_use(self):
        """Gets the ready_to_use of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501


        :return: The ready_to_use of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501
        :rtype: object
        """
        return self._ready_to_use

    @ready_to_use.setter
    def ready_to_use(self, ready_to_use):
        """Sets the ready_to_use of this IoCattleK3sV1ETCDSnapshotFileStatus.


        :param ready_to_use: The ready_to_use of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501
        :type: object
        """

        self._ready_to_use = ready_to_use

    @property
    def size(self):
        """Gets the size of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501


        :return: The size of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501
        :rtype: object
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this IoCattleK3sV1ETCDSnapshotFileStatus.


        :param size: The size of this IoCattleK3sV1ETCDSnapshotFileStatus.  # noqa: E501
        :type: object
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoCattleK3sV1ETCDSnapshotFileStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoCattleK3sV1ETCDSnapshotFileStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoCattleK3sV1ETCDSnapshotFileStatus):
            return True

        return self.to_dict() != other.to_dict()
