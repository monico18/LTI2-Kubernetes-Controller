# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoK8sApiCoreV1LifecycleHandler(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_exec': 'IoK8sApiCoreV1ExecAction',
        'http_get': 'IoK8sApiCoreV1HTTPGetAction',
        'sleep': 'IoK8sApiCoreV1SleepAction',
        'tcp_socket': 'IoK8sApiCoreV1TCPSocketAction'
    }

    attribute_map = {
        '_exec': 'exec',
        'http_get': 'httpGet',
        'sleep': 'sleep',
        'tcp_socket': 'tcpSocket'
    }

    def __init__(self, _exec=None, http_get=None, sleep=None, tcp_socket=None, _configuration=None):  # noqa: E501
        """IoK8sApiCoreV1LifecycleHandler - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__exec = None
        self._http_get = None
        self._sleep = None
        self._tcp_socket = None
        self.discriminator = None

        if _exec is not None:
            self._exec = _exec
        if http_get is not None:
            self.http_get = http_get
        if sleep is not None:
            self.sleep = sleep
        if tcp_socket is not None:
            self.tcp_socket = tcp_socket

    @property
    def _exec(self):
        """Gets the _exec of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501

        Exec specifies the action to take.  # noqa: E501

        :return: The _exec of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501
        :rtype: IoK8sApiCoreV1ExecAction
        """
        return self.__exec

    @_exec.setter
    def _exec(self, _exec):
        """Sets the _exec of this IoK8sApiCoreV1LifecycleHandler.

        Exec specifies the action to take.  # noqa: E501

        :param _exec: The _exec of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501
        :type: IoK8sApiCoreV1ExecAction
        """

        self.__exec = _exec

    @property
    def http_get(self):
        """Gets the http_get of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501

        HTTPGet specifies the http request to perform.  # noqa: E501

        :return: The http_get of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501
        :rtype: IoK8sApiCoreV1HTTPGetAction
        """
        return self._http_get

    @http_get.setter
    def http_get(self, http_get):
        """Sets the http_get of this IoK8sApiCoreV1LifecycleHandler.

        HTTPGet specifies the http request to perform.  # noqa: E501

        :param http_get: The http_get of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501
        :type: IoK8sApiCoreV1HTTPGetAction
        """

        self._http_get = http_get

    @property
    def sleep(self):
        """Gets the sleep of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501

        Sleep represents the duration that the container should sleep before being terminated.  # noqa: E501

        :return: The sleep of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501
        :rtype: IoK8sApiCoreV1SleepAction
        """
        return self._sleep

    @sleep.setter
    def sleep(self, sleep):
        """Sets the sleep of this IoK8sApiCoreV1LifecycleHandler.

        Sleep represents the duration that the container should sleep before being terminated.  # noqa: E501

        :param sleep: The sleep of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501
        :type: IoK8sApiCoreV1SleepAction
        """

        self._sleep = sleep

    @property
    def tcp_socket(self):
        """Gets the tcp_socket of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501

        Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.  # noqa: E501

        :return: The tcp_socket of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501
        :rtype: IoK8sApiCoreV1TCPSocketAction
        """
        return self._tcp_socket

    @tcp_socket.setter
    def tcp_socket(self, tcp_socket):
        """Sets the tcp_socket of this IoK8sApiCoreV1LifecycleHandler.

        Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.  # noqa: E501

        :param tcp_socket: The tcp_socket of this IoK8sApiCoreV1LifecycleHandler.  # noqa: E501
        :type: IoK8sApiCoreV1TCPSocketAction
        """

        self._tcp_socket = tcp_socket

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApiCoreV1LifecycleHandler, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApiCoreV1LifecycleHandler):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoK8sApiCoreV1LifecycleHandler):
            return True

        return self.to_dict() != other.to_dict()
