# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoK8sApiCoreV1PodStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions': 'list[IoK8sApiCoreV1PodCondition]',
        'container_statuses': 'list[IoK8sApiCoreV1ContainerStatus]',
        'ephemeral_container_statuses': 'list[IoK8sApiCoreV1ContainerStatus]',
        'host_ip': 'str',
        'host_ips': 'list[IoK8sApiCoreV1HostIP]',
        'init_container_statuses': 'list[IoK8sApiCoreV1ContainerStatus]',
        'message': 'str',
        'nominated_node_name': 'str',
        'phase': 'str',
        'pod_ip': 'str',
        'pod_ips': 'list[IoK8sApiCoreV1PodIP]',
        'qos_class': 'str',
        'reason': 'str',
        'resize': 'str',
        'resource_claim_statuses': 'list[IoK8sApiCoreV1PodResourceClaimStatus]',
        'start_time': 'IoK8sApimachineryPkgApisMetaV1Time'
    }

    attribute_map = {
        'conditions': 'conditions',
        'container_statuses': 'containerStatuses',
        'ephemeral_container_statuses': 'ephemeralContainerStatuses',
        'host_ip': 'hostIP',
        'host_ips': 'hostIPs',
        'init_container_statuses': 'initContainerStatuses',
        'message': 'message',
        'nominated_node_name': 'nominatedNodeName',
        'phase': 'phase',
        'pod_ip': 'podIP',
        'pod_ips': 'podIPs',
        'qos_class': 'qosClass',
        'reason': 'reason',
        'resize': 'resize',
        'resource_claim_statuses': 'resourceClaimStatuses',
        'start_time': 'startTime'
    }

    def __init__(self, conditions=None, container_statuses=None, ephemeral_container_statuses=None, host_ip=None, host_ips=None, init_container_statuses=None, message=None, nominated_node_name=None, phase=None, pod_ip=None, pod_ips=None, qos_class=None, reason=None, resize=None, resource_claim_statuses=None, start_time=None, _configuration=None):  # noqa: E501
        """IoK8sApiCoreV1PodStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._conditions = None
        self._container_statuses = None
        self._ephemeral_container_statuses = None
        self._host_ip = None
        self._host_ips = None
        self._init_container_statuses = None
        self._message = None
        self._nominated_node_name = None
        self._phase = None
        self._pod_ip = None
        self._pod_ips = None
        self._qos_class = None
        self._reason = None
        self._resize = None
        self._resource_claim_statuses = None
        self._start_time = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if container_statuses is not None:
            self.container_statuses = container_statuses
        if ephemeral_container_statuses is not None:
            self.ephemeral_container_statuses = ephemeral_container_statuses
        if host_ip is not None:
            self.host_ip = host_ip
        if host_ips is not None:
            self.host_ips = host_ips
        if init_container_statuses is not None:
            self.init_container_statuses = init_container_statuses
        if message is not None:
            self.message = message
        if nominated_node_name is not None:
            self.nominated_node_name = nominated_node_name
        if phase is not None:
            self.phase = phase
        if pod_ip is not None:
            self.pod_ip = pod_ip
        if pod_ips is not None:
            self.pod_ips = pod_ips
        if qos_class is not None:
            self.qos_class = qos_class
        if reason is not None:
            self.reason = reason
        if resize is not None:
            self.resize = resize
        if resource_claim_statuses is not None:
            self.resource_claim_statuses = resource_claim_statuses
        if start_time is not None:
            self.start_time = start_time

    @property
    def conditions(self):
        """Gets the conditions of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions  # noqa: E501

        :return: The conditions of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: list[IoK8sApiCoreV1PodCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this IoK8sApiCoreV1PodStatus.

        Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions  # noqa: E501

        :param conditions: The conditions of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: list[IoK8sApiCoreV1PodCondition]
        """

        self._conditions = conditions

    @property
    def container_statuses(self):
        """Gets the container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status  # noqa: E501

        :return: The container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: list[IoK8sApiCoreV1ContainerStatus]
        """
        return self._container_statuses

    @container_statuses.setter
    def container_statuses(self, container_statuses):
        """Sets the container_statuses of this IoK8sApiCoreV1PodStatus.

        The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status  # noqa: E501

        :param container_statuses: The container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: list[IoK8sApiCoreV1ContainerStatus]
        """

        self._container_statuses = container_statuses

    @property
    def ephemeral_container_statuses(self):
        """Gets the ephemeral_container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        Status for any ephemeral containers that have run in this pod.  # noqa: E501

        :return: The ephemeral_container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: list[IoK8sApiCoreV1ContainerStatus]
        """
        return self._ephemeral_container_statuses

    @ephemeral_container_statuses.setter
    def ephemeral_container_statuses(self, ephemeral_container_statuses):
        """Sets the ephemeral_container_statuses of this IoK8sApiCoreV1PodStatus.

        Status for any ephemeral containers that have run in this pod.  # noqa: E501

        :param ephemeral_container_statuses: The ephemeral_container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: list[IoK8sApiCoreV1ContainerStatus]
        """

        self._ephemeral_container_statuses = ephemeral_container_statuses

    @property
    def host_ip(self):
        """Gets the host_ip of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod  # noqa: E501

        :return: The host_ip of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: str
        """
        return self._host_ip

    @host_ip.setter
    def host_ip(self, host_ip):
        """Sets the host_ip of this IoK8sApiCoreV1PodStatus.

        hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod  # noqa: E501

        :param host_ip: The host_ip of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: str
        """

        self._host_ip = host_ip

    @property
    def host_ips(self):
        """Gets the host_ips of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.  # noqa: E501

        :return: The host_ips of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: list[IoK8sApiCoreV1HostIP]
        """
        return self._host_ips

    @host_ips.setter
    def host_ips(self, host_ips):
        """Sets the host_ips of this IoK8sApiCoreV1PodStatus.

        hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.  # noqa: E501

        :param host_ips: The host_ips of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: list[IoK8sApiCoreV1HostIP]
        """

        self._host_ips = host_ips

    @property
    def init_container_statuses(self):
        """Gets the init_container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status  # noqa: E501

        :return: The init_container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: list[IoK8sApiCoreV1ContainerStatus]
        """
        return self._init_container_statuses

    @init_container_statuses.setter
    def init_container_statuses(self, init_container_statuses):
        """Sets the init_container_statuses of this IoK8sApiCoreV1PodStatus.

        The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status  # noqa: E501

        :param init_container_statuses: The init_container_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: list[IoK8sApiCoreV1ContainerStatus]
        """

        self._init_container_statuses = init_container_statuses

    @property
    def message(self):
        """Gets the message of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        A human readable message indicating details about why the pod is in this condition.  # noqa: E501

        :return: The message of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this IoK8sApiCoreV1PodStatus.

        A human readable message indicating details about why the pod is in this condition.  # noqa: E501

        :param message: The message of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def nominated_node_name(self):
        """Gets the nominated_node_name of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.  # noqa: E501

        :return: The nominated_node_name of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: str
        """
        return self._nominated_node_name

    @nominated_node_name.setter
    def nominated_node_name(self, nominated_node_name):
        """Sets the nominated_node_name of this IoK8sApiCoreV1PodStatus.

        nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.  # noqa: E501

        :param nominated_node_name: The nominated_node_name of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: str
        """

        self._nominated_node_name = nominated_node_name

    @property
    def phase(self):
        """Gets the phase of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase  Possible enum values:  - `\"Failed\"` means that all containers in the pod have terminated, and at least one container has terminated in a failure (exited with a non-zero exit code or was stopped by the system).  - `\"Pending\"` means the pod has been accepted by the system, but one or more of the containers has not been started. This includes time before being bound to a node, as well as time spent pulling images onto the host.  - `\"Running\"` means the pod has been bound to a node and all of the containers have been started. At least one container is still running or is in the process of being restarted.  - `\"Succeeded\"` means that all containers in the pod have voluntarily terminated with a container exit code of 0, and the system is not going to restart any of these containers.  - `\"Unknown\"` means that for some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. Deprecated: It isn't being set since 2015 (74da3b14b0c0f658b3bb8d2def5094686d0e9095)  # noqa: E501

        :return: The phase of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this IoK8sApiCoreV1PodStatus.

        The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase  Possible enum values:  - `\"Failed\"` means that all containers in the pod have terminated, and at least one container has terminated in a failure (exited with a non-zero exit code or was stopped by the system).  - `\"Pending\"` means the pod has been accepted by the system, but one or more of the containers has not been started. This includes time before being bound to a node, as well as time spent pulling images onto the host.  - `\"Running\"` means the pod has been bound to a node and all of the containers have been started. At least one container is still running or is in the process of being restarted.  - `\"Succeeded\"` means that all containers in the pod have voluntarily terminated with a container exit code of 0, and the system is not going to restart any of these containers.  - `\"Unknown\"` means that for some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. Deprecated: It isn't being set since 2015 (74da3b14b0c0f658b3bb8d2def5094686d0e9095)  # noqa: E501

        :param phase: The phase of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["Failed", "Pending", "Running", "Succeeded", "Unknown"]  # noqa: E501
        if (self._configuration.client_side_validation and
                phase not in allowed_values):
            raise ValueError(
                "Invalid value for `phase` ({0}), must be one of {1}"  # noqa: E501
                .format(phase, allowed_values)
            )

        self._phase = phase

    @property
    def pod_ip(self):
        """Gets the pod_ip of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.  # noqa: E501

        :return: The pod_ip of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: str
        """
        return self._pod_ip

    @pod_ip.setter
    def pod_ip(self, pod_ip):
        """Sets the pod_ip of this IoK8sApiCoreV1PodStatus.

        podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.  # noqa: E501

        :param pod_ip: The pod_ip of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: str
        """

        self._pod_ip = pod_ip

    @property
    def pod_ips(self):
        """Gets the pod_ips of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.  # noqa: E501

        :return: The pod_ips of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: list[IoK8sApiCoreV1PodIP]
        """
        return self._pod_ips

    @pod_ips.setter
    def pod_ips(self, pod_ips):
        """Sets the pod_ips of this IoK8sApiCoreV1PodStatus.

        podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.  # noqa: E501

        :param pod_ips: The pod_ips of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: list[IoK8sApiCoreV1PodIP]
        """

        self._pod_ips = pod_ips

    @property
    def qos_class(self):
        """Gets the qos_class of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes  Possible enum values:  - `\"BestEffort\"` is the BestEffort qos class.  - `\"Burstable\"` is the Burstable qos class.  - `\"Guaranteed\"` is the Guaranteed qos class.  # noqa: E501

        :return: The qos_class of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: str
        """
        return self._qos_class

    @qos_class.setter
    def qos_class(self, qos_class):
        """Sets the qos_class of this IoK8sApiCoreV1PodStatus.

        The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes  Possible enum values:  - `\"BestEffort\"` is the BestEffort qos class.  - `\"Burstable\"` is the Burstable qos class.  - `\"Guaranteed\"` is the Guaranteed qos class.  # noqa: E501

        :param qos_class: The qos_class of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["BestEffort", "Burstable", "Guaranteed"]  # noqa: E501
        if (self._configuration.client_side_validation and
                qos_class not in allowed_values):
            raise ValueError(
                "Invalid value for `qos_class` ({0}), must be one of {1}"  # noqa: E501
                .format(qos_class, allowed_values)
            )

        self._qos_class = qos_class

    @property
    def reason(self):
        """Gets the reason of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'  # noqa: E501

        :return: The reason of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this IoK8sApiCoreV1PodStatus.

        A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'  # noqa: E501

        :param reason: The reason of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def resize(self):
        """Gets the resize of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to \"Proposed\"  # noqa: E501

        :return: The resize of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: str
        """
        return self._resize

    @resize.setter
    def resize(self, resize):
        """Sets the resize of this IoK8sApiCoreV1PodStatus.

        Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to \"Proposed\"  # noqa: E501

        :param resize: The resize of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: str
        """

        self._resize = resize

    @property
    def resource_claim_statuses(self):
        """Gets the resource_claim_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        Status of resource claims.  # noqa: E501

        :return: The resource_claim_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: list[IoK8sApiCoreV1PodResourceClaimStatus]
        """
        return self._resource_claim_statuses

    @resource_claim_statuses.setter
    def resource_claim_statuses(self, resource_claim_statuses):
        """Sets the resource_claim_statuses of this IoK8sApiCoreV1PodStatus.

        Status of resource claims.  # noqa: E501

        :param resource_claim_statuses: The resource_claim_statuses of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: list[IoK8sApiCoreV1PodResourceClaimStatus]
        """

        self._resource_claim_statuses = resource_claim_statuses

    @property
    def start_time(self):
        """Gets the start_time of this IoK8sApiCoreV1PodStatus.  # noqa: E501

        RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.  # noqa: E501

        :return: The start_time of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1Time
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this IoK8sApiCoreV1PodStatus.

        RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.  # noqa: E501

        :param start_time: The start_time of this IoK8sApiCoreV1PodStatus.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1Time
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApiCoreV1PodStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApiCoreV1PodStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoK8sApiCoreV1PodStatus):
            return True

        return self.to_dict() != other.to_dict()
