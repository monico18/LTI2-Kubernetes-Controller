# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoK8sApiNetworkingV1HTTPIngressPath(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backend': 'IoK8sApiNetworkingV1IngressBackend',
        'path': 'str',
        'path_type': 'str'
    }

    attribute_map = {
        'backend': 'backend',
        'path': 'path',
        'path_type': 'pathType'
    }

    def __init__(self, backend=None, path=None, path_type=None, _configuration=None):  # noqa: E501
        """IoK8sApiNetworkingV1HTTPIngressPath - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._backend = None
        self._path = None
        self._path_type = None
        self.discriminator = None

        self.backend = backend
        if path is not None:
            self.path = path
        self.path_type = path_type

    @property
    def backend(self):
        """Gets the backend of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501

        backend defines the referenced service endpoint to which the traffic will be forwarded to.  # noqa: E501

        :return: The backend of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501
        :rtype: IoK8sApiNetworkingV1IngressBackend
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this IoK8sApiNetworkingV1HTTPIngressPath.

        backend defines the referenced service endpoint to which the traffic will be forwarded to.  # noqa: E501

        :param backend: The backend of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501
        :type: IoK8sApiNetworkingV1IngressBackend
        """
        if self._configuration.client_side_validation and backend is None:
            raise ValueError("Invalid value for `backend`, must not be `None`")  # noqa: E501

        self._backend = backend

    @property
    def path(self):
        """Gets the path of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501

        path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".  # noqa: E501

        :return: The path of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this IoK8sApiNetworkingV1HTTPIngressPath.

        path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".  # noqa: E501

        :param path: The path of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def path_type(self):
        """Gets the path_type of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501

        pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is   done on a path element by element basis. A path element refers is the   list of labels in the path split by the '/' separator. A request is a   match for path p if every p is an element-wise prefix of p of the   request path. Note that if the last element of the path is a substring   of the last element in request path, it is not a match (e.g. /foo/bar   matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to   the IngressClass. Implementations can treat this as a separate PathType   or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.  Possible enum values:  - `\"Exact\"` matches the URL path exactly and with case sensitivity.  - `\"ImplementationSpecific\"` matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types.  - `\"Prefix\"` matches based on a URL path prefix split by '/'. Matching is case sensitive and done on a path element by element basis. A path element refers to the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). If multiple matching paths exist in an Ingress spec, the longest matching path is given priority. Examples: - /foo/bar does not match requests to /foo/barbaz - /foo/bar matches request to /foo/bar and /foo/bar/baz - /foo and /foo/ both match requests to /foo and /foo/. If both paths are present in an Ingress spec, the longest matching path (/foo/) is given priority.  # noqa: E501

        :return: The path_type of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501
        :rtype: str
        """
        return self._path_type

    @path_type.setter
    def path_type(self, path_type):
        """Sets the path_type of this IoK8sApiNetworkingV1HTTPIngressPath.

        pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is   done on a path element by element basis. A path element refers is the   list of labels in the path split by the '/' separator. A request is a   match for path p if every p is an element-wise prefix of p of the   request path. Note that if the last element of the path is a substring   of the last element in request path, it is not a match (e.g. /foo/bar   matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to   the IngressClass. Implementations can treat this as a separate PathType   or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.  Possible enum values:  - `\"Exact\"` matches the URL path exactly and with case sensitivity.  - `\"ImplementationSpecific\"` matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types.  - `\"Prefix\"` matches based on a URL path prefix split by '/'. Matching is case sensitive and done on a path element by element basis. A path element refers to the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). If multiple matching paths exist in an Ingress spec, the longest matching path is given priority. Examples: - /foo/bar does not match requests to /foo/barbaz - /foo/bar matches request to /foo/bar and /foo/bar/baz - /foo and /foo/ both match requests to /foo and /foo/. If both paths are present in an Ingress spec, the longest matching path (/foo/) is given priority.  # noqa: E501

        :param path_type: The path_type of this IoK8sApiNetworkingV1HTTPIngressPath.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and path_type is None:
            raise ValueError("Invalid value for `path_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Exact", "ImplementationSpecific", "Prefix"]  # noqa: E501
        if (self._configuration.client_side_validation and
                path_type not in allowed_values):
            raise ValueError(
                "Invalid value for `path_type` ({0}), must be one of {1}"  # noqa: E501
                .format(path_type, allowed_values)
            )

        self._path_type = path_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApiNetworkingV1HTTPIngressPath, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApiNetworkingV1HTTPIngressPath):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoK8sApiNetworkingV1HTTPIngressPath):
            return True

        return self.to_dict() != other.to_dict()
