# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoK8sApiNodeV1RuntimeClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'handler': 'str',
        'kind': 'str',
        'metadata': 'IoK8sApimachineryPkgApisMetaV1ObjectMeta',
        'overhead': 'IoK8sApiNodeV1Overhead',
        'scheduling': 'IoK8sApiNodeV1Scheduling'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'handler': 'handler',
        'kind': 'kind',
        'metadata': 'metadata',
        'overhead': 'overhead',
        'scheduling': 'scheduling'
    }

    def __init__(self, api_version=None, handler=None, kind=None, metadata=None, overhead=None, scheduling=None, _configuration=None):  # noqa: E501
        """IoK8sApiNodeV1RuntimeClass - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_version = None
        self._handler = None
        self._kind = None
        self._metadata = None
        self._overhead = None
        self._scheduling = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        self.handler = handler
        if kind is not None:
            self.kind = kind
        if metadata is not None:
            self.metadata = metadata
        if overhead is not None:
            self.overhead = overhead
        if scheduling is not None:
            self.scheduling = scheduling

    @property
    def api_version(self):
        """Gets the api_version of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this IoK8sApiNodeV1RuntimeClass.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def handler(self):
        """Gets the handler of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501

        handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.  # noqa: E501

        :return: The handler of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :rtype: str
        """
        return self._handler

    @handler.setter
    def handler(self, handler):
        """Sets the handler of this IoK8sApiNodeV1RuntimeClass.

        handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.  # noqa: E501

        :param handler: The handler of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and handler is None:
            raise ValueError("Invalid value for `handler`, must not be `None`")  # noqa: E501

        self._handler = handler

    @property
    def kind(self):
        """Gets the kind of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoK8sApiNodeV1RuntimeClass.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501

        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :return: The metadata of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoK8sApiNodeV1RuntimeClass.

        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :param metadata: The metadata of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def overhead(self):
        """Gets the overhead of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501

        overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see  https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/  # noqa: E501

        :return: The overhead of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :rtype: IoK8sApiNodeV1Overhead
        """
        return self._overhead

    @overhead.setter
    def overhead(self, overhead):
        """Sets the overhead of this IoK8sApiNodeV1RuntimeClass.

        overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see  https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/  # noqa: E501

        :param overhead: The overhead of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :type: IoK8sApiNodeV1Overhead
        """

        self._overhead = overhead

    @property
    def scheduling(self):
        """Gets the scheduling of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501

        scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.  # noqa: E501

        :return: The scheduling of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :rtype: IoK8sApiNodeV1Scheduling
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling):
        """Sets the scheduling of this IoK8sApiNodeV1RuntimeClass.

        scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.  # noqa: E501

        :param scheduling: The scheduling of this IoK8sApiNodeV1RuntimeClass.  # noqa: E501
        :type: IoK8sApiNodeV1Scheduling
        """

        self._scheduling = scheduling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApiNodeV1RuntimeClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApiNodeV1RuntimeClass):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoK8sApiNodeV1RuntimeClass):
            return True

        return self.to_dict() != other.to_dict()
