# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoK8sApiStorageV1CSIStorageCapacity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'capacity': 'IoK8sApimachineryPkgApiResourceQuantity',
        'kind': 'str',
        'maximum_volume_size': 'IoK8sApimachineryPkgApiResourceQuantity',
        'metadata': 'IoK8sApimachineryPkgApisMetaV1ObjectMeta',
        'node_topology': 'IoK8sApimachineryPkgApisMetaV1LabelSelector',
        'storage_class_name': 'str'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'capacity': 'capacity',
        'kind': 'kind',
        'maximum_volume_size': 'maximumVolumeSize',
        'metadata': 'metadata',
        'node_topology': 'nodeTopology',
        'storage_class_name': 'storageClassName'
    }

    def __init__(self, api_version=None, capacity=None, kind=None, maximum_volume_size=None, metadata=None, node_topology=None, storage_class_name=None, _configuration=None):  # noqa: E501
        """IoK8sApiStorageV1CSIStorageCapacity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_version = None
        self._capacity = None
        self._kind = None
        self._maximum_volume_size = None
        self._metadata = None
        self._node_topology = None
        self._storage_class_name = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        if capacity is not None:
            self.capacity = capacity
        if kind is not None:
            self.kind = kind
        if maximum_volume_size is not None:
            self.maximum_volume_size = maximum_volume_size
        if metadata is not None:
            self.metadata = metadata
        if node_topology is not None:
            self.node_topology = node_topology
        self.storage_class_name = storage_class_name

    @property
    def api_version(self):
        """Gets the api_version of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this IoK8sApiStorageV1CSIStorageCapacity.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def capacity(self):
        """Gets the capacity of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501

        capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.  The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.  # noqa: E501

        :return: The capacity of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApiResourceQuantity
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this IoK8sApiStorageV1CSIStorageCapacity.

        capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.  The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.  # noqa: E501

        :param capacity: The capacity of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :type: IoK8sApimachineryPkgApiResourceQuantity
        """

        self._capacity = capacity

    @property
    def kind(self):
        """Gets the kind of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoK8sApiStorageV1CSIStorageCapacity.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def maximum_volume_size(self):
        """Gets the maximum_volume_size of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501

        maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.  This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.  # noqa: E501

        :return: The maximum_volume_size of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApiResourceQuantity
        """
        return self._maximum_volume_size

    @maximum_volume_size.setter
    def maximum_volume_size(self, maximum_volume_size):
        """Sets the maximum_volume_size of this IoK8sApiStorageV1CSIStorageCapacity.

        maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.  This is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.  # noqa: E501

        :param maximum_volume_size: The maximum_volume_size of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :type: IoK8sApimachineryPkgApiResourceQuantity
        """

        self._maximum_volume_size = maximum_volume_size

    @property
    def metadata(self):
        """Gets the metadata of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501

        Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.  Objects are namespaced.  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :return: The metadata of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoK8sApiStorageV1CSIStorageCapacity.

        Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.  Objects are namespaced.  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata  # noqa: E501

        :param metadata: The metadata of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def node_topology(self):
        """Gets the node_topology of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501

        nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.  # noqa: E501

        :return: The node_topology of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._node_topology

    @node_topology.setter
    def node_topology(self, node_topology):
        """Sets the node_topology of this IoK8sApiStorageV1CSIStorageCapacity.

        nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.  # noqa: E501

        :param node_topology: The node_topology of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._node_topology = node_topology

    @property
    def storage_class_name(self):
        """Gets the storage_class_name of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501

        storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.  # noqa: E501

        :return: The storage_class_name of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :rtype: str
        """
        return self._storage_class_name

    @storage_class_name.setter
    def storage_class_name(self, storage_class_name):
        """Sets the storage_class_name of this IoK8sApiStorageV1CSIStorageCapacity.

        storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.  # noqa: E501

        :param storage_class_name: The storage_class_name of this IoK8sApiStorageV1CSIStorageCapacity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and storage_class_name is None:
            raise ValueError("Invalid value for `storage_class_name`, must not be `None`")  # noqa: E501

        self._storage_class_name = storage_class_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApiStorageV1CSIStorageCapacity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApiStorageV1CSIStorageCapacity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoK8sApiStorageV1CSIStorageCapacity):
            return True

        return self.to_dict() != other.to_dict()
