# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1IngressRouteSpecRoutes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'match': 'str',
        'middlewares': 'list[IoTraefikV1alpha1IngressRouteSpecMiddlewares]',
        'priority': 'int',
        'services': 'list[IoTraefikV1alpha1IngressRouteSpecServices]'
    }

    attribute_map = {
        'kind': 'kind',
        'match': 'match',
        'middlewares': 'middlewares',
        'priority': 'priority',
        'services': 'services'
    }

    def __init__(self, kind=None, match=None, middlewares=None, priority=None, services=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1IngressRouteSpecRoutes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._kind = None
        self._match = None
        self._middlewares = None
        self._priority = None
        self._services = None
        self.discriminator = None

        self.kind = kind
        self.match = match
        if middlewares is not None:
            self.middlewares = middlewares
        if priority is not None:
            self.priority = priority
        if services is not None:
            self.services = services

    @property
    def kind(self):
        """Gets the kind of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501

        Kind defines the kind of the route. Rule is the only supported kind.  # noqa: E501

        :return: The kind of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoTraefikV1alpha1IngressRouteSpecRoutes.

        Kind defines the kind of the route. Rule is the only supported kind.  # noqa: E501

        :param kind: The kind of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["Rule"]  # noqa: E501
        if (self._configuration.client_side_validation and
                kind not in allowed_values):
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def match(self):
        """Gets the match of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501

        Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule  # noqa: E501

        :return: The match of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this IoTraefikV1alpha1IngressRouteSpecRoutes.

        Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule  # noqa: E501

        :param match: The match of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")  # noqa: E501

        self._match = match

    @property
    def middlewares(self):
        """Gets the middlewares of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501

        Middlewares defines the list of references to Middleware resources. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-middleware  # noqa: E501

        :return: The middlewares of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :rtype: list[IoTraefikV1alpha1IngressRouteSpecMiddlewares]
        """
        return self._middlewares

    @middlewares.setter
    def middlewares(self, middlewares):
        """Sets the middlewares of this IoTraefikV1alpha1IngressRouteSpecRoutes.

        Middlewares defines the list of references to Middleware resources. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-middleware  # noqa: E501

        :param middlewares: The middlewares of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :type: list[IoTraefikV1alpha1IngressRouteSpecMiddlewares]
        """

        self._middlewares = middlewares

    @property
    def priority(self):
        """Gets the priority of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501

        Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority  # noqa: E501

        :return: The priority of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this IoTraefikV1alpha1IngressRouteSpecRoutes.

        Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority  # noqa: E501

        :param priority: The priority of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def services(self):
        """Gets the services of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501

        Services defines the list of Service. It can contain any combination of TraefikService and/or reference to a Kubernetes Service.  # noqa: E501

        :return: The services of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :rtype: list[IoTraefikV1alpha1IngressRouteSpecServices]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this IoTraefikV1alpha1IngressRouteSpecRoutes.

        Services defines the list of Service. It can contain any combination of TraefikService and/or reference to a Kubernetes Service.  # noqa: E501

        :param services: The services of this IoTraefikV1alpha1IngressRouteSpecRoutes.  # noqa: E501
        :type: list[IoTraefikV1alpha1IngressRouteSpecServices]
        """

        self._services = services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1IngressRouteSpecRoutes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1IngressRouteSpecRoutes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1IngressRouteSpecRoutes):
            return True

        return self.to_dict() != other.to_dict()
