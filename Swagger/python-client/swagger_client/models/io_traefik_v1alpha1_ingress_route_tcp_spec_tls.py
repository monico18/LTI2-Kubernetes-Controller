# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1IngressRouteTCPSpecTls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_resolver': 'str',
        'domains': 'list[IoTraefikV1alpha1IngressRouteSpecTlsDomains]',
        'options': 'IoTraefikV1alpha1IngressRouteTCPSpecTlsOptions',
        'passthrough': 'bool',
        'secret_name': 'str',
        'store': 'IoTraefikV1alpha1IngressRouteTCPSpecTlsStore'
    }

    attribute_map = {
        'cert_resolver': 'certResolver',
        'domains': 'domains',
        'options': 'options',
        'passthrough': 'passthrough',
        'secret_name': 'secretName',
        'store': 'store'
    }

    def __init__(self, cert_resolver=None, domains=None, options=None, passthrough=None, secret_name=None, store=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1IngressRouteTCPSpecTls - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cert_resolver = None
        self._domains = None
        self._options = None
        self._passthrough = None
        self._secret_name = None
        self._store = None
        self.discriminator = None

        if cert_resolver is not None:
            self.cert_resolver = cert_resolver
        if domains is not None:
            self.domains = domains
        if options is not None:
            self.options = options
        if passthrough is not None:
            self.passthrough = passthrough
        if secret_name is not None:
            self.secret_name = secret_name
        if store is not None:
            self.store = store

    @property
    def cert_resolver(self):
        """Gets the cert_resolver of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501

        CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers  # noqa: E501

        :return: The cert_resolver of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :rtype: str
        """
        return self._cert_resolver

    @cert_resolver.setter
    def cert_resolver(self, cert_resolver):
        """Sets the cert_resolver of this IoTraefikV1alpha1IngressRouteTCPSpecTls.

        CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers  # noqa: E501

        :param cert_resolver: The cert_resolver of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :type: str
        """

        self._cert_resolver = cert_resolver

    @property
    def domains(self):
        """Gets the domains of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501

        Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains  # noqa: E501

        :return: The domains of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :rtype: list[IoTraefikV1alpha1IngressRouteSpecTlsDomains]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this IoTraefikV1alpha1IngressRouteTCPSpecTls.

        Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains  # noqa: E501

        :param domains: The domains of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :type: list[IoTraefikV1alpha1IngressRouteSpecTlsDomains]
        """

        self._domains = domains

    @property
    def options(self):
        """Gets the options of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501


        :return: The options of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :rtype: IoTraefikV1alpha1IngressRouteTCPSpecTlsOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this IoTraefikV1alpha1IngressRouteTCPSpecTls.


        :param options: The options of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :type: IoTraefikV1alpha1IngressRouteTCPSpecTlsOptions
        """

        self._options = options

    @property
    def passthrough(self):
        """Gets the passthrough of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501

        Passthrough defines whether a TLS router will terminate the TLS connection.  # noqa: E501

        :return: The passthrough of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :rtype: bool
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this IoTraefikV1alpha1IngressRouteTCPSpecTls.

        Passthrough defines whether a TLS router will terminate the TLS connection.  # noqa: E501

        :param passthrough: The passthrough of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :type: bool
        """

        self._passthrough = passthrough

    @property
    def secret_name(self):
        """Gets the secret_name of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501

        SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.  # noqa: E501

        :return: The secret_name of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this IoTraefikV1alpha1IngressRouteTCPSpecTls.

        SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.  # noqa: E501

        :param secret_name: The secret_name of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :type: str
        """

        self._secret_name = secret_name

    @property
    def store(self):
        """Gets the store of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501


        :return: The store of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :rtype: IoTraefikV1alpha1IngressRouteTCPSpecTlsStore
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this IoTraefikV1alpha1IngressRouteTCPSpecTls.


        :param store: The store of this IoTraefikV1alpha1IngressRouteTCPSpecTls.  # noqa: E501
        :type: IoTraefikV1alpha1IngressRouteTCPSpecTlsStore
        """

        self._store = store

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1IngressRouteTCPSpecTls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1IngressRouteTCPSpecTls):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1IngressRouteTCPSpecTls):
            return True

        return self.to_dict() != other.to_dict()
