# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1MiddlewareSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_prefix': 'IoTraefikV1alpha1MiddlewareSpecAddPrefix',
        'basic_auth': 'IoTraefikV1alpha1MiddlewareSpecBasicAuth',
        'buffering': 'IoTraefikV1alpha1MiddlewareSpecBuffering',
        'chain': 'IoTraefikV1alpha1MiddlewareSpecChain',
        'circuit_breaker': 'IoTraefikV1alpha1MiddlewareSpecCircuitBreaker',
        'compress': 'IoTraefikV1alpha1MiddlewareSpecCompress',
        'content_type': 'IoTraefikV1alpha1MiddlewareSpecContentType',
        'digest_auth': 'IoTraefikV1alpha1MiddlewareSpecDigestAuth',
        'errors': 'IoTraefikV1alpha1MiddlewareSpecErrors',
        'forward_auth': 'IoTraefikV1alpha1MiddlewareSpecForwardAuth',
        'headers': 'IoTraefikV1alpha1MiddlewareSpecHeaders',
        'in_flight_req': 'IoTraefikV1alpha1MiddlewareSpecInFlightReq',
        'ip_white_list': 'IoTraefikV1alpha1MiddlewareSpecIpWhiteList',
        'pass_tls_client_cert': 'IoTraefikV1alpha1MiddlewareSpecPassTLSClientCert',
        'plugin': 'dict(str, object)',
        'rate_limit': 'IoTraefikV1alpha1MiddlewareSpecRateLimit',
        'redirect_regex': 'IoTraefikV1alpha1MiddlewareSpecRedirectRegex',
        'redirect_scheme': 'IoTraefikV1alpha1MiddlewareSpecRedirectScheme',
        'replace_path': 'IoTraefikV1alpha1MiddlewareSpecReplacePath',
        'replace_path_regex': 'IoTraefikV1alpha1MiddlewareSpecReplacePathRegex',
        'retry': 'IoTraefikV1alpha1MiddlewareSpecRetry',
        'strip_prefix': 'IoTraefikV1alpha1MiddlewareSpecStripPrefix',
        'strip_prefix_regex': 'IoTraefikV1alpha1MiddlewareSpecStripPrefixRegex'
    }

    attribute_map = {
        'add_prefix': 'addPrefix',
        'basic_auth': 'basicAuth',
        'buffering': 'buffering',
        'chain': 'chain',
        'circuit_breaker': 'circuitBreaker',
        'compress': 'compress',
        'content_type': 'contentType',
        'digest_auth': 'digestAuth',
        'errors': 'errors',
        'forward_auth': 'forwardAuth',
        'headers': 'headers',
        'in_flight_req': 'inFlightReq',
        'ip_white_list': 'ipWhiteList',
        'pass_tls_client_cert': 'passTLSClientCert',
        'plugin': 'plugin',
        'rate_limit': 'rateLimit',
        'redirect_regex': 'redirectRegex',
        'redirect_scheme': 'redirectScheme',
        'replace_path': 'replacePath',
        'replace_path_regex': 'replacePathRegex',
        'retry': 'retry',
        'strip_prefix': 'stripPrefix',
        'strip_prefix_regex': 'stripPrefixRegex'
    }

    def __init__(self, add_prefix=None, basic_auth=None, buffering=None, chain=None, circuit_breaker=None, compress=None, content_type=None, digest_auth=None, errors=None, forward_auth=None, headers=None, in_flight_req=None, ip_white_list=None, pass_tls_client_cert=None, plugin=None, rate_limit=None, redirect_regex=None, redirect_scheme=None, replace_path=None, replace_path_regex=None, retry=None, strip_prefix=None, strip_prefix_regex=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1MiddlewareSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._add_prefix = None
        self._basic_auth = None
        self._buffering = None
        self._chain = None
        self._circuit_breaker = None
        self._compress = None
        self._content_type = None
        self._digest_auth = None
        self._errors = None
        self._forward_auth = None
        self._headers = None
        self._in_flight_req = None
        self._ip_white_list = None
        self._pass_tls_client_cert = None
        self._plugin = None
        self._rate_limit = None
        self._redirect_regex = None
        self._redirect_scheme = None
        self._replace_path = None
        self._replace_path_regex = None
        self._retry = None
        self._strip_prefix = None
        self._strip_prefix_regex = None
        self.discriminator = None

        if add_prefix is not None:
            self.add_prefix = add_prefix
        if basic_auth is not None:
            self.basic_auth = basic_auth
        if buffering is not None:
            self.buffering = buffering
        if chain is not None:
            self.chain = chain
        if circuit_breaker is not None:
            self.circuit_breaker = circuit_breaker
        if compress is not None:
            self.compress = compress
        if content_type is not None:
            self.content_type = content_type
        if digest_auth is not None:
            self.digest_auth = digest_auth
        if errors is not None:
            self.errors = errors
        if forward_auth is not None:
            self.forward_auth = forward_auth
        if headers is not None:
            self.headers = headers
        if in_flight_req is not None:
            self.in_flight_req = in_flight_req
        if ip_white_list is not None:
            self.ip_white_list = ip_white_list
        if pass_tls_client_cert is not None:
            self.pass_tls_client_cert = pass_tls_client_cert
        if plugin is not None:
            self.plugin = plugin
        if rate_limit is not None:
            self.rate_limit = rate_limit
        if redirect_regex is not None:
            self.redirect_regex = redirect_regex
        if redirect_scheme is not None:
            self.redirect_scheme = redirect_scheme
        if replace_path is not None:
            self.replace_path = replace_path
        if replace_path_regex is not None:
            self.replace_path_regex = replace_path_regex
        if retry is not None:
            self.retry = retry
        if strip_prefix is not None:
            self.strip_prefix = strip_prefix
        if strip_prefix_regex is not None:
            self.strip_prefix_regex = strip_prefix_regex

    @property
    def add_prefix(self):
        """Gets the add_prefix of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The add_prefix of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecAddPrefix
        """
        return self._add_prefix

    @add_prefix.setter
    def add_prefix(self, add_prefix):
        """Sets the add_prefix of this IoTraefikV1alpha1MiddlewareSpec.


        :param add_prefix: The add_prefix of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecAddPrefix
        """

        self._add_prefix = add_prefix

    @property
    def basic_auth(self):
        """Gets the basic_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The basic_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecBasicAuth
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this IoTraefikV1alpha1MiddlewareSpec.


        :param basic_auth: The basic_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecBasicAuth
        """

        self._basic_auth = basic_auth

    @property
    def buffering(self):
        """Gets the buffering of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The buffering of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecBuffering
        """
        return self._buffering

    @buffering.setter
    def buffering(self, buffering):
        """Sets the buffering of this IoTraefikV1alpha1MiddlewareSpec.


        :param buffering: The buffering of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecBuffering
        """

        self._buffering = buffering

    @property
    def chain(self):
        """Gets the chain of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The chain of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecChain
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this IoTraefikV1alpha1MiddlewareSpec.


        :param chain: The chain of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecChain
        """

        self._chain = chain

    @property
    def circuit_breaker(self):
        """Gets the circuit_breaker of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The circuit_breaker of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecCircuitBreaker
        """
        return self._circuit_breaker

    @circuit_breaker.setter
    def circuit_breaker(self, circuit_breaker):
        """Sets the circuit_breaker of this IoTraefikV1alpha1MiddlewareSpec.


        :param circuit_breaker: The circuit_breaker of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecCircuitBreaker
        """

        self._circuit_breaker = circuit_breaker

    @property
    def compress(self):
        """Gets the compress of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The compress of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecCompress
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this IoTraefikV1alpha1MiddlewareSpec.


        :param compress: The compress of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecCompress
        """

        self._compress = compress

    @property
    def content_type(self):
        """Gets the content_type of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The content_type of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecContentType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this IoTraefikV1alpha1MiddlewareSpec.


        :param content_type: The content_type of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecContentType
        """

        self._content_type = content_type

    @property
    def digest_auth(self):
        """Gets the digest_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The digest_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecDigestAuth
        """
        return self._digest_auth

    @digest_auth.setter
    def digest_auth(self, digest_auth):
        """Sets the digest_auth of this IoTraefikV1alpha1MiddlewareSpec.


        :param digest_auth: The digest_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecDigestAuth
        """

        self._digest_auth = digest_auth

    @property
    def errors(self):
        """Gets the errors of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The errors of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecErrors
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this IoTraefikV1alpha1MiddlewareSpec.


        :param errors: The errors of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecErrors
        """

        self._errors = errors

    @property
    def forward_auth(self):
        """Gets the forward_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The forward_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecForwardAuth
        """
        return self._forward_auth

    @forward_auth.setter
    def forward_auth(self, forward_auth):
        """Sets the forward_auth of this IoTraefikV1alpha1MiddlewareSpec.


        :param forward_auth: The forward_auth of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecForwardAuth
        """

        self._forward_auth = forward_auth

    @property
    def headers(self):
        """Gets the headers of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The headers of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this IoTraefikV1alpha1MiddlewareSpec.


        :param headers: The headers of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecHeaders
        """

        self._headers = headers

    @property
    def in_flight_req(self):
        """Gets the in_flight_req of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The in_flight_req of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecInFlightReq
        """
        return self._in_flight_req

    @in_flight_req.setter
    def in_flight_req(self, in_flight_req):
        """Sets the in_flight_req of this IoTraefikV1alpha1MiddlewareSpec.


        :param in_flight_req: The in_flight_req of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecInFlightReq
        """

        self._in_flight_req = in_flight_req

    @property
    def ip_white_list(self):
        """Gets the ip_white_list of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The ip_white_list of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecIpWhiteList
        """
        return self._ip_white_list

    @ip_white_list.setter
    def ip_white_list(self, ip_white_list):
        """Sets the ip_white_list of this IoTraefikV1alpha1MiddlewareSpec.


        :param ip_white_list: The ip_white_list of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecIpWhiteList
        """

        self._ip_white_list = ip_white_list

    @property
    def pass_tls_client_cert(self):
        """Gets the pass_tls_client_cert of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The pass_tls_client_cert of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecPassTLSClientCert
        """
        return self._pass_tls_client_cert

    @pass_tls_client_cert.setter
    def pass_tls_client_cert(self, pass_tls_client_cert):
        """Sets the pass_tls_client_cert of this IoTraefikV1alpha1MiddlewareSpec.


        :param pass_tls_client_cert: The pass_tls_client_cert of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecPassTLSClientCert
        """

        self._pass_tls_client_cert = pass_tls_client_cert

    @property
    def plugin(self):
        """Gets the plugin of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501

        Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/  # noqa: E501

        :return: The plugin of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._plugin

    @plugin.setter
    def plugin(self, plugin):
        """Sets the plugin of this IoTraefikV1alpha1MiddlewareSpec.

        Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/  # noqa: E501

        :param plugin: The plugin of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: dict(str, object)
        """

        self._plugin = plugin

    @property
    def rate_limit(self):
        """Gets the rate_limit of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The rate_limit of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecRateLimit
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this IoTraefikV1alpha1MiddlewareSpec.


        :param rate_limit: The rate_limit of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecRateLimit
        """

        self._rate_limit = rate_limit

    @property
    def redirect_regex(self):
        """Gets the redirect_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The redirect_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecRedirectRegex
        """
        return self._redirect_regex

    @redirect_regex.setter
    def redirect_regex(self, redirect_regex):
        """Sets the redirect_regex of this IoTraefikV1alpha1MiddlewareSpec.


        :param redirect_regex: The redirect_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecRedirectRegex
        """

        self._redirect_regex = redirect_regex

    @property
    def redirect_scheme(self):
        """Gets the redirect_scheme of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The redirect_scheme of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecRedirectScheme
        """
        return self._redirect_scheme

    @redirect_scheme.setter
    def redirect_scheme(self, redirect_scheme):
        """Sets the redirect_scheme of this IoTraefikV1alpha1MiddlewareSpec.


        :param redirect_scheme: The redirect_scheme of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecRedirectScheme
        """

        self._redirect_scheme = redirect_scheme

    @property
    def replace_path(self):
        """Gets the replace_path of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The replace_path of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecReplacePath
        """
        return self._replace_path

    @replace_path.setter
    def replace_path(self, replace_path):
        """Sets the replace_path of this IoTraefikV1alpha1MiddlewareSpec.


        :param replace_path: The replace_path of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecReplacePath
        """

        self._replace_path = replace_path

    @property
    def replace_path_regex(self):
        """Gets the replace_path_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The replace_path_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecReplacePathRegex
        """
        return self._replace_path_regex

    @replace_path_regex.setter
    def replace_path_regex(self, replace_path_regex):
        """Sets the replace_path_regex of this IoTraefikV1alpha1MiddlewareSpec.


        :param replace_path_regex: The replace_path_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecReplacePathRegex
        """

        self._replace_path_regex = replace_path_regex

    @property
    def retry(self):
        """Gets the retry of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The retry of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecRetry
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this IoTraefikV1alpha1MiddlewareSpec.


        :param retry: The retry of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecRetry
        """

        self._retry = retry

    @property
    def strip_prefix(self):
        """Gets the strip_prefix of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The strip_prefix of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecStripPrefix
        """
        return self._strip_prefix

    @strip_prefix.setter
    def strip_prefix(self, strip_prefix):
        """Sets the strip_prefix of this IoTraefikV1alpha1MiddlewareSpec.


        :param strip_prefix: The strip_prefix of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecStripPrefix
        """

        self._strip_prefix = strip_prefix

    @property
    def strip_prefix_regex(self):
        """Gets the strip_prefix_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501


        :return: The strip_prefix_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecStripPrefixRegex
        """
        return self._strip_prefix_regex

    @strip_prefix_regex.setter
    def strip_prefix_regex(self, strip_prefix_regex):
        """Sets the strip_prefix_regex of this IoTraefikV1alpha1MiddlewareSpec.


        :param strip_prefix_regex: The strip_prefix_regex of this IoTraefikV1alpha1MiddlewareSpec.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecStripPrefixRegex
        """

        self._strip_prefix_regex = strip_prefix_regex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1MiddlewareSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpec):
            return True

        return self.to_dict() != other.to_dict()
