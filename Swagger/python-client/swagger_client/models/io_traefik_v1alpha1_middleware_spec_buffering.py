# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1MiddlewareSpecBuffering(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_request_body_bytes': 'int',
        'max_response_body_bytes': 'int',
        'mem_request_body_bytes': 'int',
        'mem_response_body_bytes': 'int',
        'retry_expression': 'str'
    }

    attribute_map = {
        'max_request_body_bytes': 'maxRequestBodyBytes',
        'max_response_body_bytes': 'maxResponseBodyBytes',
        'mem_request_body_bytes': 'memRequestBodyBytes',
        'mem_response_body_bytes': 'memResponseBodyBytes',
        'retry_expression': 'retryExpression'
    }

    def __init__(self, max_request_body_bytes=None, max_response_body_bytes=None, mem_request_body_bytes=None, mem_response_body_bytes=None, retry_expression=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1MiddlewareSpecBuffering - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._max_request_body_bytes = None
        self._max_response_body_bytes = None
        self._mem_request_body_bytes = None
        self._mem_response_body_bytes = None
        self._retry_expression = None
        self.discriminator = None

        if max_request_body_bytes is not None:
            self.max_request_body_bytes = max_request_body_bytes
        if max_response_body_bytes is not None:
            self.max_response_body_bytes = max_response_body_bytes
        if mem_request_body_bytes is not None:
            self.mem_request_body_bytes = mem_request_body_bytes
        if mem_response_body_bytes is not None:
            self.mem_response_body_bytes = mem_response_body_bytes
        if retry_expression is not None:
            self.retry_expression = retry_expression

    @property
    def max_request_body_bytes(self):
        """Gets the max_request_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501

        MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).  # noqa: E501

        :return: The max_request_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :rtype: int
        """
        return self._max_request_body_bytes

    @max_request_body_bytes.setter
    def max_request_body_bytes(self, max_request_body_bytes):
        """Sets the max_request_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.

        MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).  # noqa: E501

        :param max_request_body_bytes: The max_request_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :type: int
        """

        self._max_request_body_bytes = max_request_body_bytes

    @property
    def max_response_body_bytes(self):
        """Gets the max_response_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501

        MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).  # noqa: E501

        :return: The max_response_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :rtype: int
        """
        return self._max_response_body_bytes

    @max_response_body_bytes.setter
    def max_response_body_bytes(self, max_response_body_bytes):
        """Sets the max_response_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.

        MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).  # noqa: E501

        :param max_response_body_bytes: The max_response_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :type: int
        """

        self._max_response_body_bytes = max_response_body_bytes

    @property
    def mem_request_body_bytes(self):
        """Gets the mem_request_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501

        MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).  # noqa: E501

        :return: The mem_request_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :rtype: int
        """
        return self._mem_request_body_bytes

    @mem_request_body_bytes.setter
    def mem_request_body_bytes(self, mem_request_body_bytes):
        """Sets the mem_request_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.

        MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).  # noqa: E501

        :param mem_request_body_bytes: The mem_request_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :type: int
        """

        self._mem_request_body_bytes = mem_request_body_bytes

    @property
    def mem_response_body_bytes(self):
        """Gets the mem_response_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501

        MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).  # noqa: E501

        :return: The mem_response_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :rtype: int
        """
        return self._mem_response_body_bytes

    @mem_response_body_bytes.setter
    def mem_response_body_bytes(self, mem_response_body_bytes):
        """Sets the mem_response_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.

        MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).  # noqa: E501

        :param mem_response_body_bytes: The mem_response_body_bytes of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :type: int
        """

        self._mem_response_body_bytes = mem_response_body_bytes

    @property
    def retry_expression(self):
        """Gets the retry_expression of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501

        RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#retryexpression  # noqa: E501

        :return: The retry_expression of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :rtype: str
        """
        return self._retry_expression

    @retry_expression.setter
    def retry_expression(self, retry_expression):
        """Sets the retry_expression of this IoTraefikV1alpha1MiddlewareSpecBuffering.

        RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#retryexpression  # noqa: E501

        :param retry_expression: The retry_expression of this IoTraefikV1alpha1MiddlewareSpecBuffering.  # noqa: E501
        :type: str
        """

        self._retry_expression = retry_expression

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1MiddlewareSpecBuffering, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecBuffering):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecBuffering):
            return True

        return self.to_dict() != other.to_dict()
