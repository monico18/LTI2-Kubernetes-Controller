# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1MiddlewareSpecCircuitBreaker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_period': 'object',
        'expression': 'str',
        'fallback_duration': 'object',
        'recovery_duration': 'object'
    }

    attribute_map = {
        'check_period': 'checkPeriod',
        'expression': 'expression',
        'fallback_duration': 'fallbackDuration',
        'recovery_duration': 'recoveryDuration'
    }

    def __init__(self, check_period=None, expression=None, fallback_duration=None, recovery_duration=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1MiddlewareSpecCircuitBreaker - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._check_period = None
        self._expression = None
        self._fallback_duration = None
        self._recovery_duration = None
        self.discriminator = None

        if check_period is not None:
            self.check_period = check_period
        if expression is not None:
            self.expression = expression
        if fallback_duration is not None:
            self.fallback_duration = fallback_duration
        if recovery_duration is not None:
            self.recovery_duration = recovery_duration

    @property
    def check_period(self):
        """Gets the check_period of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501

        CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).  # noqa: E501

        :return: The check_period of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501
        :rtype: object
        """
        return self._check_period

    @check_period.setter
    def check_period(self, check_period):
        """Sets the check_period of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.

        CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).  # noqa: E501

        :param check_period: The check_period of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501
        :type: object
        """

        self._check_period = check_period

    @property
    def expression(self):
        """Gets the expression of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501

        Expression is the condition that triggers the tripped state.  # noqa: E501

        :return: The expression of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.

        Expression is the condition that triggers the tripped state.  # noqa: E501

        :param expression: The expression of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def fallback_duration(self):
        """Gets the fallback_duration of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501

        FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).  # noqa: E501

        :return: The fallback_duration of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501
        :rtype: object
        """
        return self._fallback_duration

    @fallback_duration.setter
    def fallback_duration(self, fallback_duration):
        """Sets the fallback_duration of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.

        FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).  # noqa: E501

        :param fallback_duration: The fallback_duration of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501
        :type: object
        """

        self._fallback_duration = fallback_duration

    @property
    def recovery_duration(self):
        """Gets the recovery_duration of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501

        RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).  # noqa: E501

        :return: The recovery_duration of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501
        :rtype: object
        """
        return self._recovery_duration

    @recovery_duration.setter
    def recovery_duration(self, recovery_duration):
        """Sets the recovery_duration of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.

        RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).  # noqa: E501

        :param recovery_duration: The recovery_duration of this IoTraefikV1alpha1MiddlewareSpecCircuitBreaker.  # noqa: E501
        :type: object
        """

        self._recovery_duration = recovery_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1MiddlewareSpecCircuitBreaker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecCircuitBreaker):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecCircuitBreaker):
            return True

        return self.to_dict() != other.to_dict()
