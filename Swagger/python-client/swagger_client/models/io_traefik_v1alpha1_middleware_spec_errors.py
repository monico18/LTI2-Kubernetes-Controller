# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1MiddlewareSpecErrors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'service': 'IoTraefikV1alpha1MiddlewareSpecErrorsService',
        'status': 'list[str]'
    }

    attribute_map = {
        'query': 'query',
        'service': 'service',
        'status': 'status'
    }

    def __init__(self, query=None, service=None, status=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1MiddlewareSpecErrors - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._query = None
        self._service = None
        self._status = None
        self.discriminator = None

        if query is not None:
            self.query = query
        if service is not None:
            self.service = service
        if status is not None:
            self.status = status

    @property
    def query(self):
        """Gets the query of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501

        Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.  # noqa: E501

        :return: The query of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this IoTraefikV1alpha1MiddlewareSpecErrors.

        Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.  # noqa: E501

        :param query: The query of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def service(self):
        """Gets the service of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501


        :return: The service of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecErrorsService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this IoTraefikV1alpha1MiddlewareSpecErrors.


        :param service: The service of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecErrorsService
        """

        self._service = service

    @property
    def status(self):
        """Gets the status of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501

        Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).  # noqa: E501

        :return: The status of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IoTraefikV1alpha1MiddlewareSpecErrors.

        Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).  # noqa: E501

        :param status: The status of this IoTraefikV1alpha1MiddlewareSpecErrors.  # noqa: E501
        :type: list[str]
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1MiddlewareSpecErrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecErrors):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecErrors):
            return True

        return self.to_dict() != other.to_dict()
