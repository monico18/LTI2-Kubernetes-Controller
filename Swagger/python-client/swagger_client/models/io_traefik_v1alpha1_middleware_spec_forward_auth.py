# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1MiddlewareSpecForwardAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'auth_request_headers': 'list[str]',
        'auth_response_headers': 'list[str]',
        'auth_response_headers_regex': 'str',
        'tls': 'IoTraefikV1alpha1MiddlewareSpecForwardAuthTls',
        'trust_forward_header': 'bool'
    }

    attribute_map = {
        'address': 'address',
        'auth_request_headers': 'authRequestHeaders',
        'auth_response_headers': 'authResponseHeaders',
        'auth_response_headers_regex': 'authResponseHeadersRegex',
        'tls': 'tls',
        'trust_forward_header': 'trustForwardHeader'
    }

    def __init__(self, address=None, auth_request_headers=None, auth_response_headers=None, auth_response_headers_regex=None, tls=None, trust_forward_header=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1MiddlewareSpecForwardAuth - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._auth_request_headers = None
        self._auth_response_headers = None
        self._auth_response_headers_regex = None
        self._tls = None
        self._trust_forward_header = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if auth_request_headers is not None:
            self.auth_request_headers = auth_request_headers
        if auth_response_headers is not None:
            self.auth_response_headers = auth_response_headers
        if auth_response_headers_regex is not None:
            self.auth_response_headers_regex = auth_response_headers_regex
        if tls is not None:
            self.tls = tls
        if trust_forward_header is not None:
            self.trust_forward_header = trust_forward_header

    @property
    def address(self):
        """Gets the address of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501

        Address defines the authentication server address.  # noqa: E501

        :return: The address of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.

        Address defines the authentication server address.  # noqa: E501

        :param address: The address of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def auth_request_headers(self):
        """Gets the auth_request_headers of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501

        AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.  # noqa: E501

        :return: The auth_request_headers of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :rtype: list[str]
        """
        return self._auth_request_headers

    @auth_request_headers.setter
    def auth_request_headers(self, auth_request_headers):
        """Sets the auth_request_headers of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.

        AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.  # noqa: E501

        :param auth_request_headers: The auth_request_headers of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :type: list[str]
        """

        self._auth_request_headers = auth_request_headers

    @property
    def auth_response_headers(self):
        """Gets the auth_response_headers of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501

        AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.  # noqa: E501

        :return: The auth_response_headers of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :rtype: list[str]
        """
        return self._auth_response_headers

    @auth_response_headers.setter
    def auth_response_headers(self, auth_response_headers):
        """Sets the auth_response_headers of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.

        AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.  # noqa: E501

        :param auth_response_headers: The auth_response_headers of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :type: list[str]
        """

        self._auth_response_headers = auth_response_headers

    @property
    def auth_response_headers_regex(self):
        """Gets the auth_response_headers_regex of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501

        AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/#authresponseheadersregex  # noqa: E501

        :return: The auth_response_headers_regex of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :rtype: str
        """
        return self._auth_response_headers_regex

    @auth_response_headers_regex.setter
    def auth_response_headers_regex(self, auth_response_headers_regex):
        """Sets the auth_response_headers_regex of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.

        AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/#authresponseheadersregex  # noqa: E501

        :param auth_response_headers_regex: The auth_response_headers_regex of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :type: str
        """

        self._auth_response_headers_regex = auth_response_headers_regex

    @property
    def tls(self):
        """Gets the tls of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501


        :return: The tls of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :rtype: IoTraefikV1alpha1MiddlewareSpecForwardAuthTls
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.


        :param tls: The tls of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :type: IoTraefikV1alpha1MiddlewareSpecForwardAuthTls
        """

        self._tls = tls

    @property
    def trust_forward_header(self):
        """Gets the trust_forward_header of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501

        TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.  # noqa: E501

        :return: The trust_forward_header of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :rtype: bool
        """
        return self._trust_forward_header

    @trust_forward_header.setter
    def trust_forward_header(self, trust_forward_header):
        """Sets the trust_forward_header of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.

        TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.  # noqa: E501

        :param trust_forward_header: The trust_forward_header of this IoTraefikV1alpha1MiddlewareSpecForwardAuth.  # noqa: E501
        :type: bool
        """

        self._trust_forward_header = trust_forward_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1MiddlewareSpecForwardAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecForwardAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecForwardAuth):
            return True

        return self.to_dict() != other.to_dict()
