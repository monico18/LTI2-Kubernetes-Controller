# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1MiddlewareSpecForwardAuthTls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ca_optional': 'bool',
        'ca_secret': 'str',
        'cert_secret': 'str',
        'insecure_skip_verify': 'bool'
    }

    attribute_map = {
        'ca_optional': 'caOptional',
        'ca_secret': 'caSecret',
        'cert_secret': 'certSecret',
        'insecure_skip_verify': 'insecureSkipVerify'
    }

    def __init__(self, ca_optional=None, ca_secret=None, cert_secret=None, insecure_skip_verify=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1MiddlewareSpecForwardAuthTls - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ca_optional = None
        self._ca_secret = None
        self._cert_secret = None
        self._insecure_skip_verify = None
        self.discriminator = None

        if ca_optional is not None:
            self.ca_optional = ca_optional
        if ca_secret is not None:
            self.ca_secret = ca_secret
        if cert_secret is not None:
            self.cert_secret = cert_secret
        if insecure_skip_verify is not None:
            self.insecure_skip_verify = insecure_skip_verify

    @property
    def ca_optional(self):
        """Gets the ca_optional of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501


        :return: The ca_optional of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501
        :rtype: bool
        """
        return self._ca_optional

    @ca_optional.setter
    def ca_optional(self, ca_optional):
        """Sets the ca_optional of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.


        :param ca_optional: The ca_optional of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501
        :type: bool
        """

        self._ca_optional = ca_optional

    @property
    def ca_secret(self):
        """Gets the ca_secret of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501

        CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.  # noqa: E501

        :return: The ca_secret of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501
        :rtype: str
        """
        return self._ca_secret

    @ca_secret.setter
    def ca_secret(self, ca_secret):
        """Sets the ca_secret of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.

        CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.  # noqa: E501

        :param ca_secret: The ca_secret of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501
        :type: str
        """

        self._ca_secret = ca_secret

    @property
    def cert_secret(self):
        """Gets the cert_secret of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501

        CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.  # noqa: E501

        :return: The cert_secret of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501
        :rtype: str
        """
        return self._cert_secret

    @cert_secret.setter
    def cert_secret(self, cert_secret):
        """Sets the cert_secret of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.

        CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.  # noqa: E501

        :param cert_secret: The cert_secret of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501
        :type: str
        """

        self._cert_secret = cert_secret

    @property
    def insecure_skip_verify(self):
        """Gets the insecure_skip_verify of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501

        InsecureSkipVerify defines whether the server certificates should be validated.  # noqa: E501

        :return: The insecure_skip_verify of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501
        :rtype: bool
        """
        return self._insecure_skip_verify

    @insecure_skip_verify.setter
    def insecure_skip_verify(self, insecure_skip_verify):
        """Sets the insecure_skip_verify of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.

        InsecureSkipVerify defines whether the server certificates should be validated.  # noqa: E501

        :param insecure_skip_verify: The insecure_skip_verify of this IoTraefikV1alpha1MiddlewareSpecForwardAuthTls.  # noqa: E501
        :type: bool
        """

        self._insecure_skip_verify = insecure_skip_verify

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1MiddlewareSpecForwardAuthTls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecForwardAuthTls):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecForwardAuthTls):
            return True

        return self.to_dict() != other.to_dict()
