# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1MiddlewareSpecHeaders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_control_allow_credentials': 'bool',
        'access_control_allow_headers': 'list[str]',
        'access_control_allow_methods': 'list[str]',
        'access_control_allow_origin_list': 'list[str]',
        'access_control_allow_origin_list_regex': 'list[str]',
        'access_control_expose_headers': 'list[str]',
        'access_control_max_age': 'int',
        'add_vary_header': 'bool',
        'allowed_hosts': 'list[str]',
        'browser_xss_filter': 'bool',
        'content_security_policy': 'str',
        'content_type_nosniff': 'bool',
        'custom_browser_xss_value': 'str',
        'custom_frame_options_value': 'str',
        'custom_request_headers': 'dict(str, str)',
        'custom_response_headers': 'dict(str, str)',
        'feature_policy': 'str',
        'force_sts_header': 'bool',
        'frame_deny': 'bool',
        'hosts_proxy_headers': 'list[str]',
        'is_development': 'bool',
        'permissions_policy': 'str',
        'public_key': 'str',
        'referrer_policy': 'str',
        'ssl_force_host': 'bool',
        'ssl_host': 'str',
        'ssl_proxy_headers': 'dict(str, str)',
        'ssl_redirect': 'bool',
        'ssl_temporary_redirect': 'bool',
        'sts_include_subdomains': 'bool',
        'sts_preload': 'bool',
        'sts_seconds': 'int'
    }

    attribute_map = {
        'access_control_allow_credentials': 'accessControlAllowCredentials',
        'access_control_allow_headers': 'accessControlAllowHeaders',
        'access_control_allow_methods': 'accessControlAllowMethods',
        'access_control_allow_origin_list': 'accessControlAllowOriginList',
        'access_control_allow_origin_list_regex': 'accessControlAllowOriginListRegex',
        'access_control_expose_headers': 'accessControlExposeHeaders',
        'access_control_max_age': 'accessControlMaxAge',
        'add_vary_header': 'addVaryHeader',
        'allowed_hosts': 'allowedHosts',
        'browser_xss_filter': 'browserXssFilter',
        'content_security_policy': 'contentSecurityPolicy',
        'content_type_nosniff': 'contentTypeNosniff',
        'custom_browser_xss_value': 'customBrowserXSSValue',
        'custom_frame_options_value': 'customFrameOptionsValue',
        'custom_request_headers': 'customRequestHeaders',
        'custom_response_headers': 'customResponseHeaders',
        'feature_policy': 'featurePolicy',
        'force_sts_header': 'forceSTSHeader',
        'frame_deny': 'frameDeny',
        'hosts_proxy_headers': 'hostsProxyHeaders',
        'is_development': 'isDevelopment',
        'permissions_policy': 'permissionsPolicy',
        'public_key': 'publicKey',
        'referrer_policy': 'referrerPolicy',
        'ssl_force_host': 'sslForceHost',
        'ssl_host': 'sslHost',
        'ssl_proxy_headers': 'sslProxyHeaders',
        'ssl_redirect': 'sslRedirect',
        'ssl_temporary_redirect': 'sslTemporaryRedirect',
        'sts_include_subdomains': 'stsIncludeSubdomains',
        'sts_preload': 'stsPreload',
        'sts_seconds': 'stsSeconds'
    }

    def __init__(self, access_control_allow_credentials=None, access_control_allow_headers=None, access_control_allow_methods=None, access_control_allow_origin_list=None, access_control_allow_origin_list_regex=None, access_control_expose_headers=None, access_control_max_age=None, add_vary_header=None, allowed_hosts=None, browser_xss_filter=None, content_security_policy=None, content_type_nosniff=None, custom_browser_xss_value=None, custom_frame_options_value=None, custom_request_headers=None, custom_response_headers=None, feature_policy=None, force_sts_header=None, frame_deny=None, hosts_proxy_headers=None, is_development=None, permissions_policy=None, public_key=None, referrer_policy=None, ssl_force_host=None, ssl_host=None, ssl_proxy_headers=None, ssl_redirect=None, ssl_temporary_redirect=None, sts_include_subdomains=None, sts_preload=None, sts_seconds=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1MiddlewareSpecHeaders - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_control_allow_credentials = None
        self._access_control_allow_headers = None
        self._access_control_allow_methods = None
        self._access_control_allow_origin_list = None
        self._access_control_allow_origin_list_regex = None
        self._access_control_expose_headers = None
        self._access_control_max_age = None
        self._add_vary_header = None
        self._allowed_hosts = None
        self._browser_xss_filter = None
        self._content_security_policy = None
        self._content_type_nosniff = None
        self._custom_browser_xss_value = None
        self._custom_frame_options_value = None
        self._custom_request_headers = None
        self._custom_response_headers = None
        self._feature_policy = None
        self._force_sts_header = None
        self._frame_deny = None
        self._hosts_proxy_headers = None
        self._is_development = None
        self._permissions_policy = None
        self._public_key = None
        self._referrer_policy = None
        self._ssl_force_host = None
        self._ssl_host = None
        self._ssl_proxy_headers = None
        self._ssl_redirect = None
        self._ssl_temporary_redirect = None
        self._sts_include_subdomains = None
        self._sts_preload = None
        self._sts_seconds = None
        self.discriminator = None

        if access_control_allow_credentials is not None:
            self.access_control_allow_credentials = access_control_allow_credentials
        if access_control_allow_headers is not None:
            self.access_control_allow_headers = access_control_allow_headers
        if access_control_allow_methods is not None:
            self.access_control_allow_methods = access_control_allow_methods
        if access_control_allow_origin_list is not None:
            self.access_control_allow_origin_list = access_control_allow_origin_list
        if access_control_allow_origin_list_regex is not None:
            self.access_control_allow_origin_list_regex = access_control_allow_origin_list_regex
        if access_control_expose_headers is not None:
            self.access_control_expose_headers = access_control_expose_headers
        if access_control_max_age is not None:
            self.access_control_max_age = access_control_max_age
        if add_vary_header is not None:
            self.add_vary_header = add_vary_header
        if allowed_hosts is not None:
            self.allowed_hosts = allowed_hosts
        if browser_xss_filter is not None:
            self.browser_xss_filter = browser_xss_filter
        if content_security_policy is not None:
            self.content_security_policy = content_security_policy
        if content_type_nosniff is not None:
            self.content_type_nosniff = content_type_nosniff
        if custom_browser_xss_value is not None:
            self.custom_browser_xss_value = custom_browser_xss_value
        if custom_frame_options_value is not None:
            self.custom_frame_options_value = custom_frame_options_value
        if custom_request_headers is not None:
            self.custom_request_headers = custom_request_headers
        if custom_response_headers is not None:
            self.custom_response_headers = custom_response_headers
        if feature_policy is not None:
            self.feature_policy = feature_policy
        if force_sts_header is not None:
            self.force_sts_header = force_sts_header
        if frame_deny is not None:
            self.frame_deny = frame_deny
        if hosts_proxy_headers is not None:
            self.hosts_proxy_headers = hosts_proxy_headers
        if is_development is not None:
            self.is_development = is_development
        if permissions_policy is not None:
            self.permissions_policy = permissions_policy
        if public_key is not None:
            self.public_key = public_key
        if referrer_policy is not None:
            self.referrer_policy = referrer_policy
        if ssl_force_host is not None:
            self.ssl_force_host = ssl_force_host
        if ssl_host is not None:
            self.ssl_host = ssl_host
        if ssl_proxy_headers is not None:
            self.ssl_proxy_headers = ssl_proxy_headers
        if ssl_redirect is not None:
            self.ssl_redirect = ssl_redirect
        if ssl_temporary_redirect is not None:
            self.ssl_temporary_redirect = ssl_temporary_redirect
        if sts_include_subdomains is not None:
            self.sts_include_subdomains = sts_include_subdomains
        if sts_preload is not None:
            self.sts_preload = sts_preload
        if sts_seconds is not None:
            self.sts_seconds = sts_seconds

    @property
    def access_control_allow_credentials(self):
        """Gets the access_control_allow_credentials of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AccessControlAllowCredentials defines whether the request can include user credentials.  # noqa: E501

        :return: The access_control_allow_credentials of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._access_control_allow_credentials

    @access_control_allow_credentials.setter
    def access_control_allow_credentials(self, access_control_allow_credentials):
        """Sets the access_control_allow_credentials of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AccessControlAllowCredentials defines whether the request can include user credentials.  # noqa: E501

        :param access_control_allow_credentials: The access_control_allow_credentials of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._access_control_allow_credentials = access_control_allow_credentials

    @property
    def access_control_allow_headers(self):
        """Gets the access_control_allow_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.  # noqa: E501

        :return: The access_control_allow_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_control_allow_headers

    @access_control_allow_headers.setter
    def access_control_allow_headers(self, access_control_allow_headers):
        """Sets the access_control_allow_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.  # noqa: E501

        :param access_control_allow_headers: The access_control_allow_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: list[str]
        """

        self._access_control_allow_headers = access_control_allow_headers

    @property
    def access_control_allow_methods(self):
        """Gets the access_control_allow_methods of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.  # noqa: E501

        :return: The access_control_allow_methods of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_control_allow_methods

    @access_control_allow_methods.setter
    def access_control_allow_methods(self, access_control_allow_methods):
        """Sets the access_control_allow_methods of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.  # noqa: E501

        :param access_control_allow_methods: The access_control_allow_methods of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: list[str]
        """

        self._access_control_allow_methods = access_control_allow_methods

    @property
    def access_control_allow_origin_list(self):
        """Gets the access_control_allow_origin_list of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".  # noqa: E501

        :return: The access_control_allow_origin_list of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_control_allow_origin_list

    @access_control_allow_origin_list.setter
    def access_control_allow_origin_list(self, access_control_allow_origin_list):
        """Sets the access_control_allow_origin_list of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".  # noqa: E501

        :param access_control_allow_origin_list: The access_control_allow_origin_list of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: list[str]
        """

        self._access_control_allow_origin_list = access_control_allow_origin_list

    @property
    def access_control_allow_origin_list_regex(self):
        """Gets the access_control_allow_origin_list_regex of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).  # noqa: E501

        :return: The access_control_allow_origin_list_regex of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_control_allow_origin_list_regex

    @access_control_allow_origin_list_regex.setter
    def access_control_allow_origin_list_regex(self, access_control_allow_origin_list_regex):
        """Sets the access_control_allow_origin_list_regex of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).  # noqa: E501

        :param access_control_allow_origin_list_regex: The access_control_allow_origin_list_regex of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: list[str]
        """

        self._access_control_allow_origin_list_regex = access_control_allow_origin_list_regex

    @property
    def access_control_expose_headers(self):
        """Gets the access_control_expose_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.  # noqa: E501

        :return: The access_control_expose_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_control_expose_headers

    @access_control_expose_headers.setter
    def access_control_expose_headers(self, access_control_expose_headers):
        """Sets the access_control_expose_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.  # noqa: E501

        :param access_control_expose_headers: The access_control_expose_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: list[str]
        """

        self._access_control_expose_headers = access_control_expose_headers

    @property
    def access_control_max_age(self):
        """Gets the access_control_max_age of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AccessControlMaxAge defines the time that a preflight request may be cached.  # noqa: E501

        :return: The access_control_max_age of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: int
        """
        return self._access_control_max_age

    @access_control_max_age.setter
    def access_control_max_age(self, access_control_max_age):
        """Sets the access_control_max_age of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AccessControlMaxAge defines the time that a preflight request may be cached.  # noqa: E501

        :param access_control_max_age: The access_control_max_age of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: int
        """

        self._access_control_max_age = access_control_max_age

    @property
    def add_vary_header(self):
        """Gets the add_vary_header of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.  # noqa: E501

        :return: The add_vary_header of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._add_vary_header

    @add_vary_header.setter
    def add_vary_header(self, add_vary_header):
        """Sets the add_vary_header of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.  # noqa: E501

        :param add_vary_header: The add_vary_header of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._add_vary_header = add_vary_header

    @property
    def allowed_hosts(self):
        """Gets the allowed_hosts of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        AllowedHosts defines the fully qualified list of allowed domain names.  # noqa: E501

        :return: The allowed_hosts of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_hosts

    @allowed_hosts.setter
    def allowed_hosts(self, allowed_hosts):
        """Sets the allowed_hosts of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        AllowedHosts defines the fully qualified list of allowed domain names.  # noqa: E501

        :param allowed_hosts: The allowed_hosts of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: list[str]
        """

        self._allowed_hosts = allowed_hosts

    @property
    def browser_xss_filter(self):
        """Gets the browser_xss_filter of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.  # noqa: E501

        :return: The browser_xss_filter of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._browser_xss_filter

    @browser_xss_filter.setter
    def browser_xss_filter(self, browser_xss_filter):
        """Sets the browser_xss_filter of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.  # noqa: E501

        :param browser_xss_filter: The browser_xss_filter of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._browser_xss_filter = browser_xss_filter

    @property
    def content_security_policy(self):
        """Gets the content_security_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        ContentSecurityPolicy defines the Content-Security-Policy header value.  # noqa: E501

        :return: The content_security_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: str
        """
        return self._content_security_policy

    @content_security_policy.setter
    def content_security_policy(self, content_security_policy):
        """Sets the content_security_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        ContentSecurityPolicy defines the Content-Security-Policy header value.  # noqa: E501

        :param content_security_policy: The content_security_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: str
        """

        self._content_security_policy = content_security_policy

    @property
    def content_type_nosniff(self):
        """Gets the content_type_nosniff of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.  # noqa: E501

        :return: The content_type_nosniff of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._content_type_nosniff

    @content_type_nosniff.setter
    def content_type_nosniff(self, content_type_nosniff):
        """Sets the content_type_nosniff of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.  # noqa: E501

        :param content_type_nosniff: The content_type_nosniff of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._content_type_nosniff = content_type_nosniff

    @property
    def custom_browser_xss_value(self):
        """Gets the custom_browser_xss_value of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.  # noqa: E501

        :return: The custom_browser_xss_value of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: str
        """
        return self._custom_browser_xss_value

    @custom_browser_xss_value.setter
    def custom_browser_xss_value(self, custom_browser_xss_value):
        """Sets the custom_browser_xss_value of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.  # noqa: E501

        :param custom_browser_xss_value: The custom_browser_xss_value of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: str
        """

        self._custom_browser_xss_value = custom_browser_xss_value

    @property
    def custom_frame_options_value(self):
        """Gets the custom_frame_options_value of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.  # noqa: E501

        :return: The custom_frame_options_value of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: str
        """
        return self._custom_frame_options_value

    @custom_frame_options_value.setter
    def custom_frame_options_value(self, custom_frame_options_value):
        """Sets the custom_frame_options_value of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.  # noqa: E501

        :param custom_frame_options_value: The custom_frame_options_value of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: str
        """

        self._custom_frame_options_value = custom_frame_options_value

    @property
    def custom_request_headers(self):
        """Gets the custom_request_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        CustomRequestHeaders defines the header names and values to apply to the request.  # noqa: E501

        :return: The custom_request_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_request_headers

    @custom_request_headers.setter
    def custom_request_headers(self, custom_request_headers):
        """Sets the custom_request_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        CustomRequestHeaders defines the header names and values to apply to the request.  # noqa: E501

        :param custom_request_headers: The custom_request_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_request_headers = custom_request_headers

    @property
    def custom_response_headers(self):
        """Gets the custom_response_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        CustomResponseHeaders defines the header names and values to apply to the response.  # noqa: E501

        :return: The custom_response_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_response_headers

    @custom_response_headers.setter
    def custom_response_headers(self, custom_response_headers):
        """Sets the custom_response_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        CustomResponseHeaders defines the header names and values to apply to the response.  # noqa: E501

        :param custom_response_headers: The custom_response_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_response_headers = custom_response_headers

    @property
    def feature_policy(self):
        """Gets the feature_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        Deprecated: use PermissionsPolicy instead.  # noqa: E501

        :return: The feature_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: str
        """
        return self._feature_policy

    @feature_policy.setter
    def feature_policy(self, feature_policy):
        """Sets the feature_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        Deprecated: use PermissionsPolicy instead.  # noqa: E501

        :param feature_policy: The feature_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: str
        """

        self._feature_policy = feature_policy

    @property
    def force_sts_header(self):
        """Gets the force_sts_header of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.  # noqa: E501

        :return: The force_sts_header of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._force_sts_header

    @force_sts_header.setter
    def force_sts_header(self, force_sts_header):
        """Sets the force_sts_header of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.  # noqa: E501

        :param force_sts_header: The force_sts_header of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._force_sts_header = force_sts_header

    @property
    def frame_deny(self):
        """Gets the frame_deny of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        FrameDeny defines whether to add the X-Frame-Options header with the DENY value.  # noqa: E501

        :return: The frame_deny of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._frame_deny

    @frame_deny.setter
    def frame_deny(self, frame_deny):
        """Sets the frame_deny of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        FrameDeny defines whether to add the X-Frame-Options header with the DENY value.  # noqa: E501

        :param frame_deny: The frame_deny of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._frame_deny = frame_deny

    @property
    def hosts_proxy_headers(self):
        """Gets the hosts_proxy_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.  # noqa: E501

        :return: The hosts_proxy_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts_proxy_headers

    @hosts_proxy_headers.setter
    def hosts_proxy_headers(self, hosts_proxy_headers):
        """Sets the hosts_proxy_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.  # noqa: E501

        :param hosts_proxy_headers: The hosts_proxy_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: list[str]
        """

        self._hosts_proxy_headers = hosts_proxy_headers

    @property
    def is_development(self):
        """Gets the is_development of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.  # noqa: E501

        :return: The is_development of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._is_development

    @is_development.setter
    def is_development(self, is_development):
        """Sets the is_development of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.  # noqa: E501

        :param is_development: The is_development of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._is_development = is_development

    @property
    def permissions_policy(self):
        """Gets the permissions_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.  # noqa: E501

        :return: The permissions_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: str
        """
        return self._permissions_policy

    @permissions_policy.setter
    def permissions_policy(self, permissions_policy):
        """Sets the permissions_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.  # noqa: E501

        :param permissions_policy: The permissions_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: str
        """

        self._permissions_policy = permissions_policy

    @property
    def public_key(self):
        """Gets the public_key of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.  # noqa: E501

        :return: The public_key of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.  # noqa: E501

        :param public_key: The public_key of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def referrer_policy(self):
        """Gets the referrer_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.  # noqa: E501

        :return: The referrer_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: str
        """
        return self._referrer_policy

    @referrer_policy.setter
    def referrer_policy(self, referrer_policy):
        """Sets the referrer_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.  # noqa: E501

        :param referrer_policy: The referrer_policy of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: str
        """

        self._referrer_policy = referrer_policy

    @property
    def ssl_force_host(self):
        """Gets the ssl_force_host of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        Deprecated: use RedirectRegex instead.  # noqa: E501

        :return: The ssl_force_host of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_force_host

    @ssl_force_host.setter
    def ssl_force_host(self, ssl_force_host):
        """Sets the ssl_force_host of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        Deprecated: use RedirectRegex instead.  # noqa: E501

        :param ssl_force_host: The ssl_force_host of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._ssl_force_host = ssl_force_host

    @property
    def ssl_host(self):
        """Gets the ssl_host of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        Deprecated: use RedirectRegex instead.  # noqa: E501

        :return: The ssl_host of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: str
        """
        return self._ssl_host

    @ssl_host.setter
    def ssl_host(self, ssl_host):
        """Sets the ssl_host of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        Deprecated: use RedirectRegex instead.  # noqa: E501

        :param ssl_host: The ssl_host of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: str
        """

        self._ssl_host = ssl_host

    @property
    def ssl_proxy_headers(self):
        """Gets the ssl_proxy_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: \"X-Forwarded-Proto\": \"https\").  # noqa: E501

        :return: The ssl_proxy_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._ssl_proxy_headers

    @ssl_proxy_headers.setter
    def ssl_proxy_headers(self, ssl_proxy_headers):
        """Sets the ssl_proxy_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: \"X-Forwarded-Proto\": \"https\").  # noqa: E501

        :param ssl_proxy_headers: The ssl_proxy_headers of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: dict(str, str)
        """

        self._ssl_proxy_headers = ssl_proxy_headers

    @property
    def ssl_redirect(self):
        """Gets the ssl_redirect of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        Deprecated: use EntryPoint redirection or RedirectScheme instead.  # noqa: E501

        :return: The ssl_redirect of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_redirect

    @ssl_redirect.setter
    def ssl_redirect(self, ssl_redirect):
        """Sets the ssl_redirect of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        Deprecated: use EntryPoint redirection or RedirectScheme instead.  # noqa: E501

        :param ssl_redirect: The ssl_redirect of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._ssl_redirect = ssl_redirect

    @property
    def ssl_temporary_redirect(self):
        """Gets the ssl_temporary_redirect of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        Deprecated: use EntryPoint redirection or RedirectScheme instead.  # noqa: E501

        :return: The ssl_temporary_redirect of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_temporary_redirect

    @ssl_temporary_redirect.setter
    def ssl_temporary_redirect(self, ssl_temporary_redirect):
        """Sets the ssl_temporary_redirect of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        Deprecated: use EntryPoint redirection or RedirectScheme instead.  # noqa: E501

        :param ssl_temporary_redirect: The ssl_temporary_redirect of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._ssl_temporary_redirect = ssl_temporary_redirect

    @property
    def sts_include_subdomains(self):
        """Gets the sts_include_subdomains of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.  # noqa: E501

        :return: The sts_include_subdomains of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._sts_include_subdomains

    @sts_include_subdomains.setter
    def sts_include_subdomains(self, sts_include_subdomains):
        """Sets the sts_include_subdomains of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.  # noqa: E501

        :param sts_include_subdomains: The sts_include_subdomains of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._sts_include_subdomains = sts_include_subdomains

    @property
    def sts_preload(self):
        """Gets the sts_preload of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.  # noqa: E501

        :return: The sts_preload of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: bool
        """
        return self._sts_preload

    @sts_preload.setter
    def sts_preload(self, sts_preload):
        """Sets the sts_preload of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.  # noqa: E501

        :param sts_preload: The sts_preload of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: bool
        """

        self._sts_preload = sts_preload

    @property
    def sts_seconds(self):
        """Gets the sts_seconds of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501

        STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.  # noqa: E501

        :return: The sts_seconds of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :rtype: int
        """
        return self._sts_seconds

    @sts_seconds.setter
    def sts_seconds(self, sts_seconds):
        """Sets the sts_seconds of this IoTraefikV1alpha1MiddlewareSpecHeaders.

        STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.  # noqa: E501

        :param sts_seconds: The sts_seconds of this IoTraefikV1alpha1MiddlewareSpecHeaders.  # noqa: E501
        :type: int
        """

        self._sts_seconds = sts_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1MiddlewareSpecHeaders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecHeaders):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecHeaders):
            return True

        return self.to_dict() != other.to_dict()
