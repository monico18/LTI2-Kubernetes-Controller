# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1MiddlewareSpecRedirectRegex(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permanent': 'bool',
        'regex': 'str',
        'replacement': 'str'
    }

    attribute_map = {
        'permanent': 'permanent',
        'regex': 'regex',
        'replacement': 'replacement'
    }

    def __init__(self, permanent=None, regex=None, replacement=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1MiddlewareSpecRedirectRegex - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._permanent = None
        self._regex = None
        self._replacement = None
        self.discriminator = None

        if permanent is not None:
            self.permanent = permanent
        if regex is not None:
            self.regex = regex
        if replacement is not None:
            self.replacement = replacement

    @property
    def permanent(self):
        """Gets the permanent of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501

        Permanent defines whether the redirection is permanent (301).  # noqa: E501

        :return: The permanent of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """Sets the permanent of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.

        Permanent defines whether the redirection is permanent (301).  # noqa: E501

        :param permanent: The permanent of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501
        :type: bool
        """

        self._permanent = permanent

    @property
    def regex(self):
        """Gets the regex of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501

        Regex defines the regex used to match and capture elements from the request URL.  # noqa: E501

        :return: The regex of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.

        Regex defines the regex used to match and capture elements from the request URL.  # noqa: E501

        :param regex: The regex of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501
        :type: str
        """

        self._regex = regex

    @property
    def replacement(self):
        """Gets the replacement of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501

        Replacement defines how to modify the URL to have the new target URL.  # noqa: E501

        :return: The replacement of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.

        Replacement defines how to modify the URL to have the new target URL.  # noqa: E501

        :param replacement: The replacement of this IoTraefikV1alpha1MiddlewareSpecRedirectRegex.  # noqa: E501
        :type: str
        """

        self._replacement = replacement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1MiddlewareSpecRedirectRegex, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecRedirectRegex):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1MiddlewareSpecRedirectRegex):
            return True

        return self.to_dict() != other.to_dict()
