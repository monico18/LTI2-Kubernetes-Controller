# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1ServersTransportSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificates_secrets': 'list[str]',
        'disable_http2': 'bool',
        'forwarding_timeouts': 'IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts',
        'insecure_skip_verify': 'bool',
        'max_idle_conns_per_host': 'int',
        'peer_cert_uri': 'str',
        'root_cas_secrets': 'list[str]',
        'server_name': 'str'
    }

    attribute_map = {
        'certificates_secrets': 'certificatesSecrets',
        'disable_http2': 'disableHTTP2',
        'forwarding_timeouts': 'forwardingTimeouts',
        'insecure_skip_verify': 'insecureSkipVerify',
        'max_idle_conns_per_host': 'maxIdleConnsPerHost',
        'peer_cert_uri': 'peerCertURI',
        'root_cas_secrets': 'rootCAsSecrets',
        'server_name': 'serverName'
    }

    def __init__(self, certificates_secrets=None, disable_http2=None, forwarding_timeouts=None, insecure_skip_verify=None, max_idle_conns_per_host=None, peer_cert_uri=None, root_cas_secrets=None, server_name=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1ServersTransportSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._certificates_secrets = None
        self._disable_http2 = None
        self._forwarding_timeouts = None
        self._insecure_skip_verify = None
        self._max_idle_conns_per_host = None
        self._peer_cert_uri = None
        self._root_cas_secrets = None
        self._server_name = None
        self.discriminator = None

        if certificates_secrets is not None:
            self.certificates_secrets = certificates_secrets
        if disable_http2 is not None:
            self.disable_http2 = disable_http2
        if forwarding_timeouts is not None:
            self.forwarding_timeouts = forwarding_timeouts
        if insecure_skip_verify is not None:
            self.insecure_skip_verify = insecure_skip_verify
        if max_idle_conns_per_host is not None:
            self.max_idle_conns_per_host = max_idle_conns_per_host
        if peer_cert_uri is not None:
            self.peer_cert_uri = peer_cert_uri
        if root_cas_secrets is not None:
            self.root_cas_secrets = root_cas_secrets
        if server_name is not None:
            self.server_name = server_name

    @property
    def certificates_secrets(self):
        """Gets the certificates_secrets of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501

        CertificatesSecrets defines a list of secret storing client certificates for mTLS.  # noqa: E501

        :return: The certificates_secrets of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._certificates_secrets

    @certificates_secrets.setter
    def certificates_secrets(self, certificates_secrets):
        """Sets the certificates_secrets of this IoTraefikV1alpha1ServersTransportSpec.

        CertificatesSecrets defines a list of secret storing client certificates for mTLS.  # noqa: E501

        :param certificates_secrets: The certificates_secrets of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :type: list[str]
        """

        self._certificates_secrets = certificates_secrets

    @property
    def disable_http2(self):
        """Gets the disable_http2 of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501

        DisableHTTP2 disables HTTP/2 for connections with backend servers.  # noqa: E501

        :return: The disable_http2 of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disable_http2

    @disable_http2.setter
    def disable_http2(self, disable_http2):
        """Sets the disable_http2 of this IoTraefikV1alpha1ServersTransportSpec.

        DisableHTTP2 disables HTTP/2 for connections with backend servers.  # noqa: E501

        :param disable_http2: The disable_http2 of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :type: bool
        """

        self._disable_http2 = disable_http2

    @property
    def forwarding_timeouts(self):
        """Gets the forwarding_timeouts of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501


        :return: The forwarding_timeouts of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts
        """
        return self._forwarding_timeouts

    @forwarding_timeouts.setter
    def forwarding_timeouts(self, forwarding_timeouts):
        """Sets the forwarding_timeouts of this IoTraefikV1alpha1ServersTransportSpec.


        :param forwarding_timeouts: The forwarding_timeouts of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :type: IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts
        """

        self._forwarding_timeouts = forwarding_timeouts

    @property
    def insecure_skip_verify(self):
        """Gets the insecure_skip_verify of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501

        InsecureSkipVerify disables SSL certificate verification.  # noqa: E501

        :return: The insecure_skip_verify of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :rtype: bool
        """
        return self._insecure_skip_verify

    @insecure_skip_verify.setter
    def insecure_skip_verify(self, insecure_skip_verify):
        """Sets the insecure_skip_verify of this IoTraefikV1alpha1ServersTransportSpec.

        InsecureSkipVerify disables SSL certificate verification.  # noqa: E501

        :param insecure_skip_verify: The insecure_skip_verify of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :type: bool
        """

        self._insecure_skip_verify = insecure_skip_verify

    @property
    def max_idle_conns_per_host(self):
        """Gets the max_idle_conns_per_host of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501

        MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.  # noqa: E501

        :return: The max_idle_conns_per_host of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_idle_conns_per_host

    @max_idle_conns_per_host.setter
    def max_idle_conns_per_host(self, max_idle_conns_per_host):
        """Sets the max_idle_conns_per_host of this IoTraefikV1alpha1ServersTransportSpec.

        MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.  # noqa: E501

        :param max_idle_conns_per_host: The max_idle_conns_per_host of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :type: int
        """

        self._max_idle_conns_per_host = max_idle_conns_per_host

    @property
    def peer_cert_uri(self):
        """Gets the peer_cert_uri of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501

        PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.  # noqa: E501

        :return: The peer_cert_uri of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :rtype: str
        """
        return self._peer_cert_uri

    @peer_cert_uri.setter
    def peer_cert_uri(self, peer_cert_uri):
        """Sets the peer_cert_uri of this IoTraefikV1alpha1ServersTransportSpec.

        PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.  # noqa: E501

        :param peer_cert_uri: The peer_cert_uri of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :type: str
        """

        self._peer_cert_uri = peer_cert_uri

    @property
    def root_cas_secrets(self):
        """Gets the root_cas_secrets of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501

        RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.  # noqa: E501

        :return: The root_cas_secrets of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._root_cas_secrets

    @root_cas_secrets.setter
    def root_cas_secrets(self, root_cas_secrets):
        """Sets the root_cas_secrets of this IoTraefikV1alpha1ServersTransportSpec.

        RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.  # noqa: E501

        :param root_cas_secrets: The root_cas_secrets of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :type: list[str]
        """

        self._root_cas_secrets = root_cas_secrets

    @property
    def server_name(self):
        """Gets the server_name of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501

        ServerName defines the server name used to contact the server.  # noqa: E501

        :return: The server_name of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this IoTraefikV1alpha1ServersTransportSpec.

        ServerName defines the server name used to contact the server.  # noqa: E501

        :param server_name: The server_name of this IoTraefikV1alpha1ServersTransportSpec.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1ServersTransportSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1ServersTransportSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1ServersTransportSpec):
            return True

        return self.to_dict() != other.to_dict()
