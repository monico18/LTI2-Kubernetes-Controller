# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dial_timeout': 'object',
        'idle_conn_timeout': 'object',
        'ping_timeout': 'object',
        'read_idle_timeout': 'object',
        'response_header_timeout': 'object'
    }

    attribute_map = {
        'dial_timeout': 'dialTimeout',
        'idle_conn_timeout': 'idleConnTimeout',
        'ping_timeout': 'pingTimeout',
        'read_idle_timeout': 'readIdleTimeout',
        'response_header_timeout': 'responseHeaderTimeout'
    }

    def __init__(self, dial_timeout=None, idle_conn_timeout=None, ping_timeout=None, read_idle_timeout=None, response_header_timeout=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dial_timeout = None
        self._idle_conn_timeout = None
        self._ping_timeout = None
        self._read_idle_timeout = None
        self._response_header_timeout = None
        self.discriminator = None

        if dial_timeout is not None:
            self.dial_timeout = dial_timeout
        if idle_conn_timeout is not None:
            self.idle_conn_timeout = idle_conn_timeout
        if ping_timeout is not None:
            self.ping_timeout = ping_timeout
        if read_idle_timeout is not None:
            self.read_idle_timeout = read_idle_timeout
        if response_header_timeout is not None:
            self.response_header_timeout = response_header_timeout

    @property
    def dial_timeout(self):
        """Gets the dial_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501

        DialTimeout is the amount of time to wait until a connection to a backend server can be established.  # noqa: E501

        :return: The dial_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :rtype: object
        """
        return self._dial_timeout

    @dial_timeout.setter
    def dial_timeout(self, dial_timeout):
        """Sets the dial_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.

        DialTimeout is the amount of time to wait until a connection to a backend server can be established.  # noqa: E501

        :param dial_timeout: The dial_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :type: object
        """

        self._dial_timeout = dial_timeout

    @property
    def idle_conn_timeout(self):
        """Gets the idle_conn_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501

        IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.  # noqa: E501

        :return: The idle_conn_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :rtype: object
        """
        return self._idle_conn_timeout

    @idle_conn_timeout.setter
    def idle_conn_timeout(self, idle_conn_timeout):
        """Sets the idle_conn_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.

        IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.  # noqa: E501

        :param idle_conn_timeout: The idle_conn_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :type: object
        """

        self._idle_conn_timeout = idle_conn_timeout

    @property
    def ping_timeout(self):
        """Gets the ping_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501

        PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.  # noqa: E501

        :return: The ping_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :rtype: object
        """
        return self._ping_timeout

    @ping_timeout.setter
    def ping_timeout(self, ping_timeout):
        """Sets the ping_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.

        PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.  # noqa: E501

        :param ping_timeout: The ping_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :type: object
        """

        self._ping_timeout = ping_timeout

    @property
    def read_idle_timeout(self):
        """Gets the read_idle_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501

        ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.  # noqa: E501

        :return: The read_idle_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :rtype: object
        """
        return self._read_idle_timeout

    @read_idle_timeout.setter
    def read_idle_timeout(self, read_idle_timeout):
        """Sets the read_idle_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.

        ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.  # noqa: E501

        :param read_idle_timeout: The read_idle_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :type: object
        """

        self._read_idle_timeout = read_idle_timeout

    @property
    def response_header_timeout(self):
        """Gets the response_header_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501

        ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).  # noqa: E501

        :return: The response_header_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :rtype: object
        """
        return self._response_header_timeout

    @response_header_timeout.setter
    def response_header_timeout(self, response_header_timeout):
        """Sets the response_header_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.

        ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).  # noqa: E501

        :param response_header_timeout: The response_header_timeout of this IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts.  # noqa: E501
        :type: object
        """

        self._response_header_timeout = response_header_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1ServersTransportSpecForwardingTimeouts):
            return True

        return self.to_dict() != other.to_dict()
