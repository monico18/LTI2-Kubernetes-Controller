# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1ServersTransportTCPSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dial_keep_alive': 'object',
        'dial_timeout': 'object',
        'termination_delay': 'object',
        'tls': 'IoTraefikV1alpha1ServersTransportTCPSpecTls'
    }

    attribute_map = {
        'dial_keep_alive': 'dialKeepAlive',
        'dial_timeout': 'dialTimeout',
        'termination_delay': 'terminationDelay',
        'tls': 'tls'
    }

    def __init__(self, dial_keep_alive=None, dial_timeout=None, termination_delay=None, tls=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1ServersTransportTCPSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dial_keep_alive = None
        self._dial_timeout = None
        self._termination_delay = None
        self._tls = None
        self.discriminator = None

        if dial_keep_alive is not None:
            self.dial_keep_alive = dial_keep_alive
        if dial_timeout is not None:
            self.dial_timeout = dial_timeout
        if termination_delay is not None:
            self.termination_delay = termination_delay
        if tls is not None:
            self.tls = tls

    @property
    def dial_keep_alive(self):
        """Gets the dial_keep_alive of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501

        DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.  # noqa: E501

        :return: The dial_keep_alive of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501
        :rtype: object
        """
        return self._dial_keep_alive

    @dial_keep_alive.setter
    def dial_keep_alive(self, dial_keep_alive):
        """Sets the dial_keep_alive of this IoTraefikV1alpha1ServersTransportTCPSpec.

        DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.  # noqa: E501

        :param dial_keep_alive: The dial_keep_alive of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501
        :type: object
        """

        self._dial_keep_alive = dial_keep_alive

    @property
    def dial_timeout(self):
        """Gets the dial_timeout of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501

        DialTimeout is the amount of time to wait until a connection to a backend server can be established.  # noqa: E501

        :return: The dial_timeout of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501
        :rtype: object
        """
        return self._dial_timeout

    @dial_timeout.setter
    def dial_timeout(self, dial_timeout):
        """Sets the dial_timeout of this IoTraefikV1alpha1ServersTransportTCPSpec.

        DialTimeout is the amount of time to wait until a connection to a backend server can be established.  # noqa: E501

        :param dial_timeout: The dial_timeout of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501
        :type: object
        """

        self._dial_timeout = dial_timeout

    @property
    def termination_delay(self):
        """Gets the termination_delay of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501

        TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.  # noqa: E501

        :return: The termination_delay of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501
        :rtype: object
        """
        return self._termination_delay

    @termination_delay.setter
    def termination_delay(self, termination_delay):
        """Sets the termination_delay of this IoTraefikV1alpha1ServersTransportTCPSpec.

        TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.  # noqa: E501

        :param termination_delay: The termination_delay of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501
        :type: object
        """

        self._termination_delay = termination_delay

    @property
    def tls(self):
        """Gets the tls of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501


        :return: The tls of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1ServersTransportTCPSpecTls
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this IoTraefikV1alpha1ServersTransportTCPSpec.


        :param tls: The tls of this IoTraefikV1alpha1ServersTransportTCPSpec.  # noqa: E501
        :type: IoTraefikV1alpha1ServersTransportTCPSpecTls
        """

        self._tls = tls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1ServersTransportTCPSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1ServersTransportTCPSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1ServersTransportTCPSpec):
            return True

        return self.to_dict() != other.to_dict()
