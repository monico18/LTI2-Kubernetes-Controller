# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1TLSOptionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alpn_protocols': 'list[str]',
        'cipher_suites': 'list[str]',
        'client_auth': 'IoTraefikV1alpha1TLSOptionSpecClientAuth',
        'curve_preferences': 'list[str]',
        'max_version': 'str',
        'min_version': 'str',
        'prefer_server_cipher_suites': 'bool',
        'sni_strict': 'bool'
    }

    attribute_map = {
        'alpn_protocols': 'alpnProtocols',
        'cipher_suites': 'cipherSuites',
        'client_auth': 'clientAuth',
        'curve_preferences': 'curvePreferences',
        'max_version': 'maxVersion',
        'min_version': 'minVersion',
        'prefer_server_cipher_suites': 'preferServerCipherSuites',
        'sni_strict': 'sniStrict'
    }

    def __init__(self, alpn_protocols=None, cipher_suites=None, client_auth=None, curve_preferences=None, max_version=None, min_version=None, prefer_server_cipher_suites=None, sni_strict=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1TLSOptionSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alpn_protocols = None
        self._cipher_suites = None
        self._client_auth = None
        self._curve_preferences = None
        self._max_version = None
        self._min_version = None
        self._prefer_server_cipher_suites = None
        self._sni_strict = None
        self.discriminator = None

        if alpn_protocols is not None:
            self.alpn_protocols = alpn_protocols
        if cipher_suites is not None:
            self.cipher_suites = cipher_suites
        if client_auth is not None:
            self.client_auth = client_auth
        if curve_preferences is not None:
            self.curve_preferences = curve_preferences
        if max_version is not None:
            self.max_version = max_version
        if min_version is not None:
            self.min_version = min_version
        if prefer_server_cipher_suites is not None:
            self.prefer_server_cipher_suites = prefer_server_cipher_suites
        if sni_strict is not None:
            self.sni_strict = sni_strict

    @property
    def alpn_protocols(self):
        """Gets the alpn_protocols of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501

        ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#alpn-protocols  # noqa: E501

        :return: The alpn_protocols of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._alpn_protocols

    @alpn_protocols.setter
    def alpn_protocols(self, alpn_protocols):
        """Sets the alpn_protocols of this IoTraefikV1alpha1TLSOptionSpec.

        ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#alpn-protocols  # noqa: E501

        :param alpn_protocols: The alpn_protocols of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :type: list[str]
        """

        self._alpn_protocols = alpn_protocols

    @property
    def cipher_suites(self):
        """Gets the cipher_suites of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501

        CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#cipher-suites  # noqa: E501

        :return: The cipher_suites of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._cipher_suites

    @cipher_suites.setter
    def cipher_suites(self, cipher_suites):
        """Sets the cipher_suites of this IoTraefikV1alpha1TLSOptionSpec.

        CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#cipher-suites  # noqa: E501

        :param cipher_suites: The cipher_suites of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :type: list[str]
        """

        self._cipher_suites = cipher_suites

    @property
    def client_auth(self):
        """Gets the client_auth of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501


        :return: The client_auth of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1TLSOptionSpecClientAuth
        """
        return self._client_auth

    @client_auth.setter
    def client_auth(self, client_auth):
        """Sets the client_auth of this IoTraefikV1alpha1TLSOptionSpec.


        :param client_auth: The client_auth of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :type: IoTraefikV1alpha1TLSOptionSpecClientAuth
        """

        self._client_auth = client_auth

    @property
    def curve_preferences(self):
        """Gets the curve_preferences of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501

        CurvePreferences defines the preferred elliptic curves in a specific order. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#curve-preferences  # noqa: E501

        :return: The curve_preferences of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._curve_preferences

    @curve_preferences.setter
    def curve_preferences(self, curve_preferences):
        """Sets the curve_preferences of this IoTraefikV1alpha1TLSOptionSpec.

        CurvePreferences defines the preferred elliptic curves in a specific order. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#curve-preferences  # noqa: E501

        :param curve_preferences: The curve_preferences of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :type: list[str]
        """

        self._curve_preferences = curve_preferences

    @property
    def max_version(self):
        """Gets the max_version of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501

        MaxVersion defines the maximum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: None.  # noqa: E501

        :return: The max_version of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :rtype: str
        """
        return self._max_version

    @max_version.setter
    def max_version(self, max_version):
        """Sets the max_version of this IoTraefikV1alpha1TLSOptionSpec.

        MaxVersion defines the maximum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: None.  # noqa: E501

        :param max_version: The max_version of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :type: str
        """

        self._max_version = max_version

    @property
    def min_version(self):
        """Gets the min_version of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501

        MinVersion defines the minimum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: VersionTLS10.  # noqa: E501

        :return: The min_version of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :rtype: str
        """
        return self._min_version

    @min_version.setter
    def min_version(self, min_version):
        """Sets the min_version of this IoTraefikV1alpha1TLSOptionSpec.

        MinVersion defines the minimum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: VersionTLS10.  # noqa: E501

        :param min_version: The min_version of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :type: str
        """

        self._min_version = min_version

    @property
    def prefer_server_cipher_suites(self):
        """Gets the prefer_server_cipher_suites of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501

        PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's. It is enabled automatically when minVersion or maxVersion is set. Deprecated: https://github.com/golang/go/issues/45430  # noqa: E501

        :return: The prefer_server_cipher_suites of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._prefer_server_cipher_suites

    @prefer_server_cipher_suites.setter
    def prefer_server_cipher_suites(self, prefer_server_cipher_suites):
        """Sets the prefer_server_cipher_suites of this IoTraefikV1alpha1TLSOptionSpec.

        PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's. It is enabled automatically when minVersion or maxVersion is set. Deprecated: https://github.com/golang/go/issues/45430  # noqa: E501

        :param prefer_server_cipher_suites: The prefer_server_cipher_suites of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :type: bool
        """

        self._prefer_server_cipher_suites = prefer_server_cipher_suites

    @property
    def sni_strict(self):
        """Gets the sni_strict of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501

        SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.  # noqa: E501

        :return: The sni_strict of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._sni_strict

    @sni_strict.setter
    def sni_strict(self, sni_strict):
        """Sets the sni_strict of this IoTraefikV1alpha1TLSOptionSpec.

        SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.  # noqa: E501

        :param sni_strict: The sni_strict of this IoTraefikV1alpha1TLSOptionSpec.  # noqa: E501
        :type: bool
        """

        self._sni_strict = sni_strict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1TLSOptionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1TLSOptionSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1TLSOptionSpec):
            return True

        return self.to_dict() != other.to_dict()
