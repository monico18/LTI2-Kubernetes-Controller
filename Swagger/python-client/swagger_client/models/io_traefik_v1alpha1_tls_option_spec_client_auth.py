# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1TLSOptionSpecClientAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_auth_type': 'str',
        'secret_names': 'list[str]'
    }

    attribute_map = {
        'client_auth_type': 'clientAuthType',
        'secret_names': 'secretNames'
    }

    def __init__(self, client_auth_type=None, secret_names=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1TLSOptionSpecClientAuth - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_auth_type = None
        self._secret_names = None
        self.discriminator = None

        if client_auth_type is not None:
            self.client_auth_type = client_auth_type
        if secret_names is not None:
            self.secret_names = secret_names

    @property
    def client_auth_type(self):
        """Gets the client_auth_type of this IoTraefikV1alpha1TLSOptionSpecClientAuth.  # noqa: E501

        ClientAuthType defines the client authentication type to apply.  # noqa: E501

        :return: The client_auth_type of this IoTraefikV1alpha1TLSOptionSpecClientAuth.  # noqa: E501
        :rtype: str
        """
        return self._client_auth_type

    @client_auth_type.setter
    def client_auth_type(self, client_auth_type):
        """Sets the client_auth_type of this IoTraefikV1alpha1TLSOptionSpecClientAuth.

        ClientAuthType defines the client authentication type to apply.  # noqa: E501

        :param client_auth_type: The client_auth_type of this IoTraefikV1alpha1TLSOptionSpecClientAuth.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoClientCert", "RequestClientCert", "RequireAnyClientCert", "VerifyClientCertIfGiven", "RequireAndVerifyClientCert"]  # noqa: E501
        if (self._configuration.client_side_validation and
                client_auth_type not in allowed_values):
            raise ValueError(
                "Invalid value for `client_auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(client_auth_type, allowed_values)
            )

        self._client_auth_type = client_auth_type

    @property
    def secret_names(self):
        """Gets the secret_names of this IoTraefikV1alpha1TLSOptionSpecClientAuth.  # noqa: E501

        SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.  # noqa: E501

        :return: The secret_names of this IoTraefikV1alpha1TLSOptionSpecClientAuth.  # noqa: E501
        :rtype: list[str]
        """
        return self._secret_names

    @secret_names.setter
    def secret_names(self, secret_names):
        """Sets the secret_names of this IoTraefikV1alpha1TLSOptionSpecClientAuth.

        SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.  # noqa: E501

        :param secret_names: The secret_names of this IoTraefikV1alpha1TLSOptionSpecClientAuth.  # noqa: E501
        :type: list[str]
        """

        self._secret_names = secret_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1TLSOptionSpecClientAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1TLSOptionSpecClientAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1TLSOptionSpecClientAuth):
            return True

        return self.to_dict() != other.to_dict()
