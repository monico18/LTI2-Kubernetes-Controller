# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1TLSStoreSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificates': 'list[IoTraefikV1alpha1TLSStoreSpecCertificates]',
        'default_certificate': 'IoTraefikV1alpha1TLSStoreSpecDefaultCertificate',
        'default_generated_cert': 'IoTraefikV1alpha1TLSStoreSpecDefaultGeneratedCert'
    }

    attribute_map = {
        'certificates': 'certificates',
        'default_certificate': 'defaultCertificate',
        'default_generated_cert': 'defaultGeneratedCert'
    }

    def __init__(self, certificates=None, default_certificate=None, default_generated_cert=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1TLSStoreSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._certificates = None
        self._default_certificate = None
        self._default_generated_cert = None
        self.discriminator = None

        if certificates is not None:
            self.certificates = certificates
        if default_certificate is not None:
            self.default_certificate = default_certificate
        if default_generated_cert is not None:
            self.default_generated_cert = default_generated_cert

    @property
    def certificates(self):
        """Gets the certificates of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501

        Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.  # noqa: E501

        :return: The certificates of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501
        :rtype: list[IoTraefikV1alpha1TLSStoreSpecCertificates]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this IoTraefikV1alpha1TLSStoreSpec.

        Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.  # noqa: E501

        :param certificates: The certificates of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501
        :type: list[IoTraefikV1alpha1TLSStoreSpecCertificates]
        """

        self._certificates = certificates

    @property
    def default_certificate(self):
        """Gets the default_certificate of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501


        :return: The default_certificate of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1TLSStoreSpecDefaultCertificate
        """
        return self._default_certificate

    @default_certificate.setter
    def default_certificate(self, default_certificate):
        """Sets the default_certificate of this IoTraefikV1alpha1TLSStoreSpec.


        :param default_certificate: The default_certificate of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501
        :type: IoTraefikV1alpha1TLSStoreSpecDefaultCertificate
        """

        self._default_certificate = default_certificate

    @property
    def default_generated_cert(self):
        """Gets the default_generated_cert of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501


        :return: The default_generated_cert of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501
        :rtype: IoTraefikV1alpha1TLSStoreSpecDefaultGeneratedCert
        """
        return self._default_generated_cert

    @default_generated_cert.setter
    def default_generated_cert(self, default_generated_cert):
        """Sets the default_generated_cert of this IoTraefikV1alpha1TLSStoreSpec.


        :param default_generated_cert: The default_generated_cert of this IoTraefikV1alpha1TLSStoreSpec.  # noqa: E501
        :type: IoTraefikV1alpha1TLSStoreSpecDefaultGeneratedCert
        """

        self._default_generated_cert = default_generated_cert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1TLSStoreSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1TLSStoreSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1TLSStoreSpec):
            return True

        return self.to_dict() != other.to_dict()
