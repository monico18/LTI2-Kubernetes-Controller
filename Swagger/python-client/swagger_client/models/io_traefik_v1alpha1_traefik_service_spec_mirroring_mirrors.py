# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.29.4+k3s1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'name': 'str',
        'namespace': 'str',
        'native_lb': 'bool',
        'pass_host_header': 'bool',
        'percent': 'int',
        'port': 'object',
        'response_forwarding': 'IoTraefikV1alpha1IngressRouteSpecResponseForwarding',
        'scheme': 'str',
        'servers_transport': 'str',
        'sticky': 'IoTraefikV1alpha1IngressRouteSpecSticky',
        'strategy': 'str',
        'weight': 'int'
    }

    attribute_map = {
        'kind': 'kind',
        'name': 'name',
        'namespace': 'namespace',
        'native_lb': 'nativeLB',
        'pass_host_header': 'passHostHeader',
        'percent': 'percent',
        'port': 'port',
        'response_forwarding': 'responseForwarding',
        'scheme': 'scheme',
        'servers_transport': 'serversTransport',
        'sticky': 'sticky',
        'strategy': 'strategy',
        'weight': 'weight'
    }

    def __init__(self, kind=None, name=None, namespace=None, native_lb=None, pass_host_header=None, percent=None, port=None, response_forwarding=None, scheme=None, servers_transport=None, sticky=None, strategy=None, weight=None, _configuration=None):  # noqa: E501
        """IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._kind = None
        self._name = None
        self._namespace = None
        self._native_lb = None
        self._pass_host_header = None
        self._percent = None
        self._port = None
        self._response_forwarding = None
        self._scheme = None
        self._servers_transport = None
        self._sticky = None
        self._strategy = None
        self._weight = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        self.name = name
        if namespace is not None:
            self.namespace = namespace
        if native_lb is not None:
            self.native_lb = native_lb
        if pass_host_header is not None:
            self.pass_host_header = pass_host_header
        if percent is not None:
            self.percent = percent
        if port is not None:
            self.port = port
        if response_forwarding is not None:
            self.response_forwarding = response_forwarding
        if scheme is not None:
            self.scheme = scheme
        if servers_transport is not None:
            self.servers_transport = servers_transport
        if sticky is not None:
            self.sticky = sticky
        if strategy is not None:
            self.strategy = strategy
        if weight is not None:
            self.weight = weight

    @property
    def kind(self):
        """Gets the kind of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        Kind defines the kind of the Service.  # noqa: E501

        :return: The kind of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        Kind defines the kind of the Service.  # noqa: E501

        :param kind: The kind of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Service", "TraefikService"]  # noqa: E501
        if (self._configuration.client_side_validation and
                kind not in allowed_values):
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.  # noqa: E501

        :return: The name of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.  # noqa: E501

        :param name: The name of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.  # noqa: E501

        :return: The namespace of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.  # noqa: E501

        :param namespace: The namespace of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def native_lb(self):
        """Gets the native_lb of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.  # noqa: E501

        :return: The native_lb of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: bool
        """
        return self._native_lb

    @native_lb.setter
    def native_lb(self, native_lb):
        """Sets the native_lb of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.  # noqa: E501

        :param native_lb: The native_lb of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: bool
        """

        self._native_lb = native_lb

    @property
    def pass_host_header(self):
        """Gets the pass_host_header of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.  # noqa: E501

        :return: The pass_host_header of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: bool
        """
        return self._pass_host_header

    @pass_host_header.setter
    def pass_host_header(self, pass_host_header):
        """Sets the pass_host_header of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.  # noqa: E501

        :param pass_host_header: The pass_host_header of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: bool
        """

        self._pass_host_header = pass_host_header

    @property
    def percent(self):
        """Gets the percent of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        Percent defines the part of the traffic to mirror. Supported values: 0 to 100.  # noqa: E501

        :return: The percent of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: int
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        Percent defines the part of the traffic to mirror. Supported values: 0 to 100.  # noqa: E501

        :param percent: The percent of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: int
        """

        self._percent = percent

    @property
    def port(self):
        """Gets the port of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        Port defines the port of a Kubernetes Service. This can be a reference to a named port.  # noqa: E501

        :return: The port of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: object
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        Port defines the port of a Kubernetes Service. This can be a reference to a named port.  # noqa: E501

        :param port: The port of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: object
        """

        self._port = port

    @property
    def response_forwarding(self):
        """Gets the response_forwarding of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501


        :return: The response_forwarding of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: IoTraefikV1alpha1IngressRouteSpecResponseForwarding
        """
        return self._response_forwarding

    @response_forwarding.setter
    def response_forwarding(self, response_forwarding):
        """Sets the response_forwarding of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.


        :param response_forwarding: The response_forwarding of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: IoTraefikV1alpha1IngressRouteSpecResponseForwarding
        """

        self._response_forwarding = response_forwarding

    @property
    def scheme(self):
        """Gets the scheme of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.  # noqa: E501

        :return: The scheme of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.  # noqa: E501

        :param scheme: The scheme of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: str
        """

        self._scheme = scheme

    @property
    def servers_transport(self):
        """Gets the servers_transport of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.  # noqa: E501

        :return: The servers_transport of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: str
        """
        return self._servers_transport

    @servers_transport.setter
    def servers_transport(self, servers_transport):
        """Sets the servers_transport of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.  # noqa: E501

        :param servers_transport: The servers_transport of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: str
        """

        self._servers_transport = servers_transport

    @property
    def sticky(self):
        """Gets the sticky of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501


        :return: The sticky of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: IoTraefikV1alpha1IngressRouteSpecSticky
        """
        return self._sticky

    @sticky.setter
    def sticky(self, sticky):
        """Sets the sticky of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.


        :param sticky: The sticky of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: IoTraefikV1alpha1IngressRouteSpecSticky
        """

        self._sticky = sticky

    @property
    def strategy(self):
        """Gets the strategy of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.  # noqa: E501

        :return: The strategy of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.  # noqa: E501

        :param strategy: The strategy of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    @property
    def weight(self):
        """Gets the weight of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501

        Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).  # noqa: E501

        :return: The weight of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.

        Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).  # noqa: E501

        :param weight: The weight of this IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoTraefikV1alpha1TraefikServiceSpecMirroringMirrors):
            return True

        return self.to_dict() != other.to_dict()
